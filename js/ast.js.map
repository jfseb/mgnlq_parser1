{"version":3,"sources":["/projects/nodejs/botbuilder/abot_stringdist/src/../src/ast.ts"],"names":[],"mappings":"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","file":"ast.js","sourcesContent":["'use strict'\r\n\r\n// based on: http://en.wikibooks.org/wiki/Algorithm_implementation/Strings/Levenshtein_distance\r\n// and:  http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\r\n\r\nexport enum ASTNodeType {\r\n  BINOP,\r\n  OP,\r\n  OPEqIn,\r\n  OPContains,\r\n  OPStartsWith,\r\n  OPEndsWith,\r\n  OPAll,\r\n  OPFirst,\r\n  OPLatest,\r\n  OPNewest,\r\n  OPOldest,\r\n  CAT,\r\n  CATPH,\r\n  FACT,\r\n  LIST,\r\n  ANY,\r\n  DOM\r\n}\r\n\r\nexport class NodeType {\r\n    nt : ASTNodeType;\r\n  constructor(nt : ASTNodeType) {\r\n    this.nt = nt;\r\n  }\r\n  toString() : string {\r\n    return astNodeTypes[this.nt];\r\n  }\r\n}\r\n\r\nconst astNodeTypes =  [ \"BINOP\",\r\n  \"OP\",\r\n  \"OPEqIn\",\r\n  \"OPContains\",\r\n  \"OPStartsWith\",\r\n  \"OPEndsWith\",\r\n  \"OPAll\",\r\n  \"OPFirst\",\r\n  \"OPLatest\",\r\n  \"OPNewest\",\r\n  \"OPOldest\",\r\n  \"CAT\",\r\n  \"CATPH\",\r\n  \"FACT\",\r\n  \"LIST\",\r\n  \"ANY\",\r\n  \"DOM\"\r\n];\r\n\r\nexport interface ASTNode {\r\n  type : ASTNodeType,\r\n  bearer? : any,\r\n  children? : ASTNode[];\r\n};\r\n\r\nexport function makeNode(type : ASTNodeType, ...  args : ASTNode[]) : ASTNode {\r\n  return {\r\n    type : type,\r\n    children : args\r\n  }\r\n}\r\n\r\n\r\nexport function makeNodeForCat(cat : any) : ASTNode {\r\n  return {\r\n    type : ASTNodeType.CAT,\r\n    bearer : cat\r\n  }\r\n}\r\n\r\n\r\nexport function makeNodeForDomain(cat : any) : ASTNode {\r\n  return {\r\n    type : ASTNodeType.DOM,\r\n    bearer : cat\r\n  }\r\n}\r\n\r\nexport function makeNodeForToken(type : ASTNodeType, opToken : any) : ASTNode {\r\n  return {\r\n    type : type,\r\n    bearer : opToken\r\n  }\r\n}\r\n\r\n\r\nexport function makeNodeForFact(fact : any) : ASTNode {\r\n  return {\r\n    type : ASTNodeType.FACT,\r\n    bearer : fact\r\n  }\r\n}\r\n\r\n\r\nexport function makeNodeForAny(fact : any) : ASTNode {\r\n  return {\r\n    type : ASTNodeType.ANY,\r\n    bearer : fact\r\n  }\r\n}\r\n\r\n\r\nexport function typeToString(type : ASTNodeType) {\r\n  return astNodeTypes[type];\r\n}\r\n\r\nexport function dumpNodeNice(node : ASTNode) {\r\n  if (!node) {\r\n    return undefined;\r\n  }\r\n  var r = {  type : typeToString(node.type) } as any;\r\n    r.index = getIndex(node);\r\n    if(node.children && node.children.length) {\r\n      r.children = node.children.map(n => dumpNodeNice(n));\r\n    }\r\n    return r;\r\n}\r\n\r\nfunction getIndex(node : ASTNode) {\r\n  if(!node || !node.bearer) {\r\n    return -1 ;\r\n  }\r\n  return node.bearer.startOffset;\r\n}\r\n\r\nfunction makePrefix(prefix : number, indent : number) {\r\n  var s = '';\r\n  for(var i = 0; i < indent*prefix; ++i) {\r\n    s += ' ';\r\n  }\r\n  return s;\r\n}\r\n\r\nexport function astToText(node : ASTNode, indent? : number, prefix? : number) {\r\n  prefix = prefix || 0;\r\n  indent = indent || 2;\r\n  var sprefix = makePrefix(prefix, indent);\r\n  var index =  getIndex(node);\r\n  var ln =  node ?  `${typeToString(node.type)} ${index}` : '(undefined)';\r\n  if (!node) {\r\n    return sprefix + node + \"\\n\";\r\n  }\r\n  if(node.children) {\r\n    var schildren = node.children.map(c => astToText(c,indent,prefix+1));\r\n    return sprefix + ln + `(${schildren.length})` + '\\n' + schildren.join('');\r\n  }\r\n  return sprefix + ln + \"\\n\";\r\n}"],"sourceRoot":"ABC"}