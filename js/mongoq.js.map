{"version":3,"sources":["/projects/nodejs/botbuilder/abot_stringdist/src/../src/mongoq.ts"],"names":[],"mappings":"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","file":"mongoq.js","sourcesContent":["'use strict'\r\n\r\n// based on: http://en.wikibooks.org/wiki/Algorithm_implementation/Strings/Levenshtein_distance\r\n// and:  http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\r\n\r\nimport { ErBase as ErBase, Sentence as Sentence, IFErBase as IFErBase } from 'mgnlq_er';\r\nimport { IFModel as IFModel , Model as Model} from 'mgnlq_model';\r\n\r\nimport * as debug from 'debugf';\r\n\r\nconst debuglog = debug('mongoq');\r\n\r\nimport * as chevrotain from 'chevrotain';\r\nimport * as AST from './ast';\r\n\r\nimport { ASTNodeType as NT} from './ast';\r\n\r\n  var createToken = chevrotain.createToken;\r\n  var Lexer = chevrotain.Lexer;\r\n  var Parser = chevrotain.Parser;\r\n\r\n\r\n\r\n\r\n\r\nimport * as mongoose from 'mongoose';\r\n\r\nimport * as process from 'process';\r\n\r\nprocess.on(\r\n\r\n    \"unhandledRejection\",\r\n\r\n    function handleWarning( reason, promise ) {\r\n\r\n\r\n\r\n        console.log(  \"[PROCESS] Unhandled Promise Rejection\" );\r\n\r\n        console.log(  \"- - - - - - - - - - - - - - - - - - -\"  );\r\n\r\n        console.log( reason );\r\n\r\n        console.log('' );\r\n\r\n\r\n\r\n    }\r\n\r\n);\r\n\r\nexport function makeMongoName(s : string) : string {\r\n  return s.replace(/[^a-zA-Z0-9]/g,'_');\r\n}\r\n\r\nvar mongodb = process.env.ABOT_MONGODB || \"testmodel\";\r\n\r\n\r\n (<any>mongoose).Promise = global.Promise;\r\n\r\nvar db = mongoose.connection;\r\n\r\nexport class MongoBridge {\r\n  _model : IFModel.IModels;\r\n  constructor(model : IFModel.IModels) {\r\n    this._model = model;\r\n  }\r\n  mongoooseDomainToDomain(mgdomain: string) : string {\r\n    var domain= undefined;\r\n    debug('searching for .............## ' + mgdomain);\r\n    this._model.domains.every(d => {\r\n     // console.log(\"here we go \"  + mgdomain + \" \" + makeMongoName(d));\r\n      debug(\"here we go \"  + mgdomain + \" \" + makeMongoName(d));\r\n      if(makeMongoName(d) === makeMongoName(mgdomain)) {\r\n        domain = d;\r\n        debug('got one ' + d);\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n\r\n    return domain;\r\n  }\r\n\r\n  makeSchema(mgdomain : string)  : mongoose.Schema {\r\n    debug('makeSchema for ' + mgdomain);\r\n   // console.log('makeschema ' + mgdomain);\r\n    var domain = this.mongoooseDomainToDomain(mgdomain);\r\n    console.log(' domain ' + domain);\r\n    console.log(JSON.stringify(this._model.domains.join(\"\\n\")));\r\n    var cats = Model.getCategoriesForDomain(this._model, domain);\r\n    var res = {};\r\n    cats.forEach(cat => {\r\n      res[makeMongoName(cat)] = { type : String};\r\n    })\r\n    return new mongoose.Schema(res);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport var talking = new Promise(function(resolve, reject) {\r\n  db.on('error', console.error.bind(console, 'connection error:'));\r\n  db.once('open', function () {\r\n    // we're connected!\r\n    debug('here model names : ' + db.modelNames());\r\n    resolve();\r\n    debug('now model names : ' + db.modelNames());\r\n    debug('done');\r\n  });\r\n});\r\n\r\ntalking.catch((err) => {\r\n  console.log(err);\r\n});\r\n\r\nexport class ModelHandle {\r\n  _theModel : IFModel.IModels;\r\n  _mgBridge : MongoBridge;\r\n  _schemas : { [key: string] : mongoose.Schema};\r\n  _models : {[key : string] : mongoose.Model<any> };\r\n  constructor(theModel: IFModel.IModels) {\r\n    this._theModel = theModel;\r\n    this._mgBridge = new MongoBridge(theModel);\r\n    this._models = {};\r\n    this._schemas = {};\r\n  }\r\n  query(mgdomain : string, query : any) : Promise<any> {\r\n    var that = this;\r\n    debuglog('query ' + mgdomain + ' >>' + JSON.stringify(query, undefined, 2));\r\n    return getDBConnection().then(() =>{\r\n      return new Promise(function(resolve, reject) {\r\n        talking.then(() => {\r\n          debug('constructing model');\r\n          if(!that._models[mgdomain] && mongoose.modelNames().indexOf(mgdomain) >= 0) {\r\n          // console.log('try1');\r\n            that._models[mgdomain] = mongoose.model(mgdomain);\r\n          //  console.log('try2');\r\n            that._schemas[mgdomain] = mongoose.model(mgdomain).schema;\r\n          }\r\n          if(!that._models[mgdomain]) {\r\n            that._schemas[mgdomain] = that._mgBridge.makeSchema(mgdomain);\r\n            mongoose.modelNames();\r\n            that._models[mgdomain] = mongoose.model(mgdomain,that._schemas[mgdomain]);\r\n          }\r\n        //  console.log('running stuff')\r\n      // db.fioriboms.aggregate([ { $match : {}}, { $group: { _id : { a : '$BSPName', b : '$AppKey' } , BSPName : { $first : '$BSPName'} , AppKey : { $first : '$AppKey' }}},{ $project: { _id : 0, BSPName : 1 }}], { cursor : {  batchSize : 0}});\r\n            var model = that._models[mgdomain];\r\n          //  console.log('here model ' + model);\r\n          //  model.collection.count({}, function(err,number) {\r\n            //  console.log(\"counted \" + number + \" members in collection\");\r\n          //  });\r\n        //   console.log(JSON.stringify(query, undefined,2));\r\n            model.collection.count({}, function(a) { console.log('lets count' + a); });\r\n            var resq = model.collection.aggregate(query)\r\n            if(resq) {\r\n              resq.toArray().then((res) =>{\r\n          //   console.log(\"here the result\" + JSON.stringify(res));\r\n              resolve(res);\r\n              //db.close();\r\n            }).catch((err) => {\r\n              console.error(err);\r\n              db.close();\r\n            })\r\n            } else {\r\n              console.log('connection closed?');\r\n            }\r\n          });\r\n      });\r\n    })\r\n  }\r\n}\r\n\r\nfunction incHash(hsh, key) {\r\n  hsh[key] = (hsh[key] || 0) + 1;\r\n}\r\n\r\n/**\r\n * given a Sentence, obtain the domain for it\r\n * @param theModel\r\n * @param sentence\r\n */\r\nexport function getDomainForSentence(theModel: IFModel.IModels, sentence : IFErBase.ISentence) : {\r\n  domain : string,\r\n  collectionName : string\r\n}\r\n{\r\n  // this is sloppy and bad\r\n  var res = {};\r\n  var o = 0xFFFFFFF;\r\n  sentence.forEach(w => {\r\n    if (w.rule.wordType === IFModel.WORDTYPE.CATEGORY ) {\r\n      o = o & w.rule.bitSentenceAnd;\r\n      Model.getDomainsForCategory(theModel,w.matchedString).forEach(d =>{\r\n        incHash(res,d);\r\n      });\r\n    }\r\n    if (w.rule.wordType === IFModel.WORDTYPE.FACT) {\r\n      o = o & w.rule.bitSentenceAnd;\r\n    //   console.log(`${w.rule.bitindex} ${w.bitindex} ${w.rule.bitSentenceAnd} ${o} `);\r\n       Model.getDomainsForCategory(theModel,w.category).forEach(d =>{\r\n        incHash(res,d);\r\n      });\r\n    }\r\n  });\r\n  var domains = Model.getDomainsForBitField(theModel,o);\r\n  if(domains.length !== 1) {\r\n    throw new Error('more than one domain: \"' + domains.join('\", \"') + '\"');\r\n  }\r\n  return {\r\n    domain : domains[0],\r\n    collectionName : makeMongoName(domains[0])\r\n  }\r\n};\r\n\r\nimport { IFErBase as IMatch, ErError as ErError } from 'mgnlq_er';\r\n\r\nimport * as mQ from './ast2MQuery';\r\n\r\nexport interface SRes {\r\n  sentence :  IFErBase.ISentence,\r\n  records : any[]\r\n};\r\n\r\nexport interface QResult {\r\n  sentence :  IFErBase.ISentence,\r\n  columns : string[],\r\n  results : string[][]\r\n};\r\n\r\n\r\nexport function fuseAndOrderResults(res : SRes[]) : IFErBase.IWhatIsTupelAnswer[] {\r\n  var all = [];\r\n  debug(JSON.stringify(res));\r\n  res.forEach(res1 => {\r\n    res1.records.forEach(rec => {\r\n      var r2 = undefined as IFErBase.IWhatIsTupelAnswer;\r\n      r2 = {\r\n        record : rec,\r\n        sentence : res1.sentence,\r\n        categories: Object.keys(rec),\r\n        result: Object.keys(rec).map(key => rec[key]),\r\n        _ranking : 1\r\n      };\r\n      all.push(r2);\r\n    })\r\n  }\r\n  );\r\n  return all;\r\n}\r\n  /*\r\n sentence: ISentence;\r\n    record: IRecord;\r\n    categories: string[];\r\n    result: string[];\r\n    _ranking: number;\r\n  */\r\nvar mongoConnPromise = undefined as Promise<mongoose.Connection>;\r\n\r\nfunction getDBConnection() : Promise<mongoose.Connection> {\r\n  if(!mongoConnPromise) {\r\n     mongoConnPromise =  new Promise(function(resolve, reject) {\r\n      mongoose.connect('mongodb://localhost/' + mongodb).then(() => {\r\n        resolve(mongoose.connection);\r\n      });\r\n    });\r\n  }\r\n  return mongoConnPromise;\r\n}\r\n\r\nimport * as SentenceParser from './sentenceparser';\r\n\r\nexport interface IQuery  {\r\n  domain : string,\r\n  columns : string[],\r\n  reverseMap : IReverseMap,\r\n  query : any\r\n};\r\n\r\nexport interface IPreparedQuery extends SentenceParser.IParsedSentences {\r\n  queries : IQuery[]\r\n};\r\n\r\nexport function prepareQueries(query : string, theModel: IFModel.IModels) : IPreparedQuery {\r\n  debuglog(`here query: ${query}`);\r\n  var r = SentenceParser.parseSentenceToAsts(query,theModel,{}); // words);\r\n  var res = Object.assign({}, r) as IPreparedQuery ;\r\n  r.domains = [];\r\n  res.queries = res.asts.map( (astnode,index) => {\r\n    var sentence = r.sentences[index];\r\n    debuglog(() => `return  ast [${index}]:` + AST.astToText(astnode));\r\n    if (!astnode) {\r\n      debuglog(() => JSON.stringify(` empty node for ${index} ` + JSON.stringify(r.errors[index],undefined,2) ) );\r\n      return undefined;\r\n    }\r\n    var nodeFieldList = astnode.children[0].children[0];\r\n    var nodeFilter = astnode.children[1];\r\n    var match = mQ.makeMongoMatchFromAst(nodeFilter, sentence, theModel);\r\n    var proj = mQ.makeMongoProjectionFromAst(nodeFieldList, sentence, theModel);\r\n    var columnsReverseMap= mQ.makeMongoColumnsFromAst(nodeFieldList, sentence,theModel);\r\n    var group = mQ.makeMongoGroupFromAst(nodeFieldList, sentence, theModel);\r\n    //   console.log(' query: ' + JSON.stringify(r)); // how to get domain?\r\n    var domainPick = getDomainForSentence(theModel, sentence);\r\n    r.domains[index] = domainPick.domain;\r\n   // test.equal(domain, 'FioriBOM',' got domain');\r\n    var query = [ match, group, proj ];\r\n    debug(` mongo query for collection ${domainPick.collectionName} : ` + JSON.stringify(query, undefined, 2));\r\n    return {\r\n      domain : domainPick.domain,\r\n      collectionName : domainPick.collectionName,\r\n      columns: columnsReverseMap.columns,\r\n      reverseMap : columnsReverseMap.reverseMap,\r\n      query : query\r\n    };\r\n  });\r\n  return res;\r\n}\r\n\r\nexport interface IProcessedMongoAnswers extends IMatch.IProcessedSentences {\r\n  queryresults : QResult[]\r\n}\r\n\r\n\r\nexport function mergeResults(r : QResult[]) {\r\n  return r;\r\n}\r\n\r\nexport function query(query : string, theModel : IFModel.IModels) : Promise<IProcessedMongoAnswers> {\r\n  var handle = new ModelHandle(theModel);\r\n  return queryInternal(query, theModel,handle);\r\n}\r\n\r\nexport type IReverseMap = { [key : string] : string};\r\n\r\nexport function remapRecord(rec,  columns: string[], reverseMap : IReverseMap) : string[] {\r\n  var r = {};\r\n  Object.keys(rec).forEach(key => {\r\n    var targetKey = reverseMap[key] || key;\r\n    r[targetKey] = rec[key];\r\n  });\r\n  return columns.map(c => r[c]);\r\n};\r\n\r\n\r\nexport function remapResult(res, columns: string[], reverseMap : IReverseMap)  : string[][] {\r\n  return res.map(record => remapRecord(record, columns, reverseMap)\r\n  );\r\n}\r\n\r\nexport function queryInternal(query : string, theModel : IFModel.IModels, handle: ModelHandle ) :\r\n  Promise<IProcessedMongoAnswers> {\r\n    var r =  prepareQueries(query, theModel);\r\n    var aPromises = r.queries.map( (query, index)  => {\r\n      debuglog(() => `query {$index} prepared for domain ` + query && query.domain);\r\n      if(query === undefined) {\r\n        return  {\r\n           sentence : r.sentences[index],\r\n           columns : [],\r\n           results : []\r\n        } as QResult\r\n      }\r\n      return handle.query(query.domain, query.query).then( res => {\r\n        //console.log('db returned' + res);\r\n        var resClean = remapResult(res, r.queries[index].columns, query.reverseMap);\r\n        return  {\r\n           sentence : r.sentences[index],\r\n           columns : r.queries[index].columns,\r\n           results : resClean\r\n        } as QResult\r\n      }\r\n    )\r\n    }\r\n    );\r\n    var u = Promise.all<QResult>(aPromises);\r\n       var k = u.then<IProcessedMongoAnswers>( aRes => {\r\n      //   console.log(\"***here results of all queries \" + JSON.stringify(aRes, undefined, 2));\r\n          var queryresults = mergeResults(aRes);\r\n          var res2 = {\r\n            queryresults : queryresults,\r\n            errors : r.errors, // [ErError.makeError_EMPTY_INPUT()] ,\r\n            tokens : r.tokens,\r\n          } as IProcessedMongoAnswers;\r\n       return res2;\r\n    }\r\n  );\r\n  return k;\r\n}\r\n\r\n/*\r\n\r\n\r\n\r\n          export interface IWhatIsTupelAnswer {\r\n              sentence: ISentence;\r\n              record: IRecord;\r\n              categories: string[];\r\n              result: string[];\r\n              _ranking: number;\r\n          }\r\n\r\n\r\n\r\n\r\n\r\n      });\r\n    }\r\n  //  logPerf('listAllWithContext');\r\n  //  perflog(\"totalListAllWithContext\");\r\n    var aSentencesReinforced = analyzeContextString(contextQueryString, aRules);\r\n  //  perflog(\"LATWC matching records (s=\" + aSentencesReinforced.sentences.length + \")...\");\r\n    var matchedAnswers = WhatIs.matchRecordsQuickMultipleCategories(aSentencesReinforced, categories, records, domainCategoryFilter); //aTool: Array<IMatch.ITool>): any /* objectstream * / {\r\n    if(debuglog.enabled){\r\n      debuglog(\" matched Answers\" + JSON.stringify(matchedAnswers, undefined, 2));\r\n    }\r\n  //  perflog(\"filtering topRanked (a=\" + matchedAnswers.tupelanswers.length + \")...\");\r\n //   var matchedFiltered = WhatIs.filterOnlyTopRankedTupel(matchedAnswers.tupelanswers);\r\n //   if (debuglog.enabled) {\r\n //     debuglog(\"LATWC matched top-ranked Answers\" + JSON.stringify(matchedFiltered, undefined, 2));\r\n //   }\r\n  }\r\n}\r\n*/"],"sourceRoot":"ABC"}