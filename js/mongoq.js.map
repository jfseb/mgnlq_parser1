{"version":3,"sources":["/projects/nodejs/botbuilder/abot_stringdist/src/../src/mongoq.ts"],"names":[],"mappings":"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","file":"mongoq.js","sourcesContent":["'use strict'\r\n\r\n// based on: http://en.wikibooks.org/wiki/Algorithm_implementation/Strings/Levenshtein_distance\r\n// and:  http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\r\n\r\nimport { ErBase as ErBase, Sentence as Sentence, IFErBase as IFErBase } from 'mgnlq_er';\r\nimport { IFModel as IFModel, Model as Model, MongoMap as MongoMap } from 'mgnlq_model';\r\n\r\nimport * as debug from 'debugf';\r\nimport * as _ from 'lodash';\r\n\r\nconst debuglog = debug('mongoq');\r\n\r\nimport * as chevrotain from 'chevrotain';\r\nimport * as AST from './ast';\r\n\r\nimport { ASTNodeType as NT } from './ast';\r\n\r\nvar createToken = chevrotain.createToken;\r\nvar Lexer = chevrotain.Lexer;\r\nvar Parser = chevrotain.Parser;\r\n\r\n\r\n\r\n\r\n\r\nimport * as mongoose from 'mongoose';\r\n\r\nimport * as process from 'process';\r\n\r\n\r\n\r\nexport function JSONStringify(obj: any): string {\r\n  function customSer(key, value) {\r\n    if (value instanceof RegExp)\r\n      return (value.toString());\r\n    else\r\n      return value;\r\n  }\r\n  return JSON.stringify(obj, customSer, 2);\r\n}\r\n\r\nprocess.on(\r\n\r\n  \"unhandledRejection\",\r\n\r\n  function handleWarning(reason, promise) {\r\n\r\n\r\n\r\n    console.log(\"[PROCESS] Unhandled Promise Rejection\");\r\n\r\n    console.log(\"- - - - - - - - - - - - - - - - - - -\");\r\n\r\n    console.log(reason);\r\n\r\n    console.log('');\r\n\r\n\r\n\r\n  }\r\n\r\n);\r\n\r\nexport function makeMongoName(s: string): string {\r\n  return s.replace(/[^a-zA-Z0-9]/g, '_');\r\n}\r\n\r\nvar mongodb = process.env.ABOT_MONGODB || \"testmodel\";\r\n\r\n\r\n(<any>mongoose).Promise = global.Promise;\r\n\r\nvar db = mongoose.connection;\r\n\r\nexport class MongoBridge {\r\n  _model: IFModel.IModels;\r\n  constructor(model: IFModel.IModels) {\r\n    this._model = model;\r\n  }\r\n  mongoooseDomainToDomain(mgdomain: string): string {\r\n    var domain = undefined;\r\n    debug('searching for .............## ' + mgdomain);\r\n    this._model.domains.every(d => {\r\n      // console.log(\"here we go \"  + mgdomain + \" \" + makeMongoName(d));\r\n      debug(\"here we go \" + mgdomain + \" \" + makeMongoName(d));\r\n      if (makeMongoName(d) === makeMongoName(mgdomain)) {\r\n        domain = d;\r\n        debug('got one ' + d);\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n\r\n    return domain;\r\n  }\r\n\r\n  /*\r\n    makeSchema(mgdomain : string)  : mongoose.Schema {\r\n      debug('makeSchema for ' + mgdomain);\r\n     // console.log('makeschema ' + mgdomain);\r\n      var domain = this.mongoooseDomainToDomain(mgdomain);\r\n      debuglog(()=> ' domain ' + domain);\r\n      debuglog(()=> ` all domains ` + this._model.domains.join(\"; \"));\r\n      var cats = Model.getCategoriesForDomain(this._model, domain);\r\n      var res = {};\r\n      cats.forEach(cat => {\r\n        res[makeMongoName(cat)] = { type : String};\r\n      })\r\n      return new mongoose.Schema(res);\r\n    }\r\n    */\r\n}\r\n\r\n\r\n\r\n/*\r\nexport var talking = new Promise(function(resolve, reject) {\r\n  db.on('error', console.error.bind(console, 'connection error:'));\r\n  db.once('open', function () {\r\n    // we're connected!\r\n    debug('here model names : ' + db.modelNames());\r\n    resolve();\r\n    debug('now model names : ' + db.modelNames());\r\n    debug('done');\r\n  });\r\n});\r\n\r\ntalking.catch((err) => {\r\n  console.log(err);\r\n});\r\n*/\r\n\r\nexport class ModelHandle {\r\n  _theModel: IFModel.IModels;\r\n  _mgBridge: MongoBridge;\r\n  _mongoose: mongoose.Mongoose;\r\n  constructor(theModel: IFModel.IModels) {\r\n    this._theModel = theModel;\r\n    this._mongoose = this._theModel.mongoHandle && this._theModel.mongoHandle.mongoose;\r\n    this._mgBridge = new MongoBridge(theModel);\r\n  }\r\n  query(domain: string, query: any): Promise<any> {\r\n    var that = this;\r\n    var mgmodelname = Model.getMongooseModelNameForDomain(this._theModel, domain); 4\r\n    debuglog('query ' + domain + ' >>' + JSON.stringify(query, undefined, 2));\r\n    return getDBConnection(this._mongoose).then((mongoose) => {\r\n\r\n      return new Promise(function (resolve, reject) {\r\n        Promise.resolve(1).then(() => {\r\n          debuglog('constructing model for ' + mgmodelname);\r\n          if (that._theModel.mongoHandle.mongoose.modelNames().indexOf(mgmodelname) < 0) {\r\n            throw new Error(` ${domain} / ${mgmodelname} is not a present model `);\r\n          }\r\n          var model = that._theModel.mongoHandle.mongoose.model(mgmodelname);\r\n          //\r\n          // console.log('try1');\r\n          //  that._models[mgdomain] = mongoose.model(mgdomain);\r\n          //  console.log('try2');\r\n          //  that._schemas[mgdomain] = mongoose.model(mgdomain).schema;\r\n          //}\r\n          /*\r\n            if(!that._models[mgdomain]) {\r\n              that._schemas[mgdomain] = that._mgBridge.makeSchema(mgdomain);\r\n              that._mongoose.modelNames();\r\n              that._models[mgdomain] = mongoose.model(mgdomain,that._schemas[mgdomain]);\r\n            }\r\n           */\r\n          //  console.log('running stuff')\r\n          // db.fioriboms.aggregate([ { $match : {}}, { $group: { _id : { a : '$BSPName', b : '$AppKey' } , BSPName : { $first : '$BSPName'} , AppKey : { $first : '$AppKey' }}},{ $project: { _id : 0, BSPName : 1 }}], { cursor : {  batchSize : 0}});\r\n          //var model = that._models[mgdomain];\r\n          //  console.log('here model ' + model);\r\n          //  model.collection.count({}, function(err,number) {\r\n          //  console.log(\"counted \" + number + \" members in collection\");\r\n          //  });\r\n          //   console.log(JSON.stringify(query, undefined,2));\r\n          /*  model.collection.count({}, function(a) {\r\n              debuglog('lets count' + a); });\r\n            */\r\n          debuglog(() => 'here model ' + Object.keys(model));\r\n          var resq = model.aggregate(query).then((res) => {\r\n            //   console.log(\"here the result\" + JSON.stringify(res));\r\n            resolve(res);\r\n            //db.close();\r\n          }).catch((err) => {\r\n            console.error(err);\r\n            db.close();\r\n          });\r\n        });\r\n      });\r\n    })\r\n  }\r\n}\r\n\r\nfunction incHash(hsh, key) {\r\n  hsh[key] = (hsh[key] || 0) + 1;\r\n}\r\n\r\n/**\r\n * given a Sentence, obtain the domain for it\r\n * @param theModel\r\n * @param sentence\r\n */\r\nexport function getDomainForSentence(theModel: IFModel.IModels, sentence: IFErBase.ISentence): {\r\n  domain: string,\r\n  collectionName: string,\r\n  modelName: string\r\n} {\r\n  // this is sloppy and bad\r\n  var res = {};\r\n  var o = 0xFFFFFFF;\r\n  sentence.forEach(w => {\r\n    if (w.rule.wordType === IFModel.WORDTYPE.CATEGORY) {\r\n      o = o & w.rule.bitSentenceAnd;\r\n      Model.getDomainsForCategory(theModel, w.matchedString).forEach(d => {\r\n        incHash(res, d);\r\n      });\r\n    }\r\n    if (w.rule.wordType === IFModel.WORDTYPE.FACT) {\r\n      o = o & w.rule.bitSentenceAnd;\r\n      //   console.log(`${w.rule.bitindex} ${w.bitindex} ${w.rule.bitSentenceAnd} ${o} `);\r\n      Model.getDomainsForCategory(theModel, w.category).forEach(d => {\r\n        incHash(res, d);\r\n      });\r\n    }\r\n  });\r\n  var domains = Model.getDomainsForBitField(theModel, o);\r\n  if (domains.length !== 1) {\r\n    throw new Error('more than one domain: \"' + domains.join('\", \"') + '\"');\r\n  }\r\n  if (!domains[0]) {\r\n    console.log('query without a domain : ' + Sentence.dumpNiceArr([sentence]));\r\n  }\r\n  return {\r\n    domain: domains[0],\r\n    collectionName: Model.getMongoCollectionNameForDomain(theModel, domains[0]),\r\n    modelName: Model.getModelNameForDomain(theModel.mongoHandle, domains[0])\r\n  }\r\n};\r\n\r\nimport { IFErBase as IMatch, ErError as ErError } from 'mgnlq_er';\r\n\r\nimport * as mQ from './ast2MQuery';\r\n\r\nexport interface SRes {\r\n  sentence: IFErBase.ISentence,\r\n  records: any[]\r\n};\r\n\r\nexport interface QResult {\r\n  domain: string,\r\n  sentence: IFErBase.ISentence,\r\n  columns: string[],\r\n  results: string[][]\r\n};\r\n\r\n/*\r\nexport function fuseAndOrderResults(res : SRes[]) : IFErBase.IWhatIsTupelAnswer[] {\r\n  var all = [];\r\n  debug(JSON.stringify(res));\r\n  res.forEach(res1 => {\r\n    res1.records.forEach(rec => {\r\n      var r2 = undefined as IFErBase.IWhatIsTupelAnswer;\r\n      r2 = {\r\n        record : rec,\r\n        sentence : res1.sentence,\r\n        categories: Object.keys(rec),\r\n        result: Object.keys(rec).map(key => rec[key]),\r\n        _ranking : 1\r\n      };\r\n      all.push(r2);\r\n    })\r\n  }\r\n  );\r\n  return all;\r\n}\r\n*/\r\n\r\n/*\r\nsentence: ISentence;\r\n  record: IRecord;\r\n  categories: string[];\r\n  result: string[];\r\n  _ranking: number;\r\n*/\r\n//var mongoConnPromise = undefined as Promise<mongoose.Connection>;\r\n\r\nfunction getDBConnection(mongooseHndl: mongoose.Mongoose): Promise<mongoose.Connection> {\r\n  if (mongooseHndl) {\r\n    debuglog('assuming present handle');\r\n    // we assume we are connected\r\n    return Promise.resolve(mongooseHndl.connection);\r\n  }\r\n  throw Error('how is this gonna work');\r\n  /*\r\n  if(!mongoConnPromise) {\r\n     mongoConnPromise =  new Promise(function(resolve, reject) {\r\n      mongoose.connect('mongodb://localhost/' + mongodb).then(() => {\r\n        resolve(mongoose.connection);\r\n      });\r\n    });\r\n  }\r\n  return mongoConnPromise;\r\n  */\r\n}\r\n\r\nimport * as SentenceParser from './sentenceparser';\r\n\r\nexport interface IQuery {\r\n  domain: string,\r\n  columns: string[],\r\n  reverseMap: IReverseMap,\r\n  query: any\r\n};\r\n\r\nexport interface IPreparedQuery extends SentenceParser.IParsedSentences {\r\n  queries: IQuery[]\r\n};\r\n\r\nexport function makeAggregateFromAst(astnode: AST.ASTNode, sentence: IFModel.IWord[], mongoMap: IFModel.CatMongoMap, fixedCategories) {\r\n  var nodeFieldList = astnode.children[0].children[0];\r\n  var nodeFilter = astnode.children[1];\r\n  var match = mQ.makeMongoMatchFromAst(nodeFilter, sentence, mongoMap);\r\n  // TODO: be better than full unwind, use only relelvant categories!\r\n  var unwind = MongoMap.unwindsForNonterminalArrays(mongoMap);\r\n  var head = [match] as any[];\r\n  if (unwind.length) {\r\n    head = head.concat(unwind);\r\n    head.push(match);\r\n  }\r\n  var categoryList = mQ.getCategoryList(fixedCategories, nodeFieldList, sentence);\r\n  var proj = mQ.makeMongoProjectionFromAst(categoryList, mongoMap);\r\n  var sort = mQ.makeMongoSortFromAst(categoryList, mongoMap);\r\n  var columnsReverseMap = mQ.makeMongoColumnsFromAst(categoryList, mongoMap);\r\n  var group = mQ.makeMongoGroupFromAst(categoryList, mongoMap);\r\n  //   console.log(' query: ' + JSON.stringify(r)); // how to get domain?\r\n  // test.equal(domain, 'FioriBOM',' got domain');\r\n  var query = head.concat([group, proj, sort]);\r\n  return { query: query, columnsReverseMap: columnsReverseMap };\r\n}\r\n\r\n\r\nexport function containsFixedCategories(theModel: IFModel.IModels, domain: string, fixedCategories: string[]): boolean {\r\n  if (fixedCategories.length === 0) {\r\n    return true;\r\n  }\r\n  var cats = Model.getCategoriesForDomain(theModel, domain);\r\n  return _.intersection(cats, fixedCategories).length === fixedCategories.length;\r\n}\r\n\r\nexport function augmentCategoriesWithURI(fixedCategories : string[], theModel : IFModel.IModels, domain : string) : string[] {\r\n  var uris = Model.getShowURICategoriesForDomain(theModel, domain);\r\n  var ranks = Model.getShowURIRankCategoriesForDomain(theModel, domain);\r\n  return _.union(uris, ranks, fixedCategories);\r\n}\r\n\r\nexport function prepareQueries(query: string, theModel: IFModel.IModels, fixedCategories: string[], options? : IQueryOptions): IPreparedQuery {\r\n  debuglog(`here query: ${query}`);\r\n  var r = SentenceParser.parseSentenceToAsts(query, theModel, {}); // words);\r\n  var res = Object.assign({}, r) as IPreparedQuery;\r\n  r.domains = [];\r\n  res.queries = res.asts.map((astnode, index) => {\r\n    var sentence = r.sentences[index];\r\n    debuglog(() => `return  ast [${index}]:` + AST.astToText(astnode));\r\n    if (!astnode) {\r\n      debuglog(() => JSON.stringify(` empty node for ${index} ` + JSON.stringify(r.errors[index], undefined, 2)));\r\n      return undefined;\r\n    }\r\n    var domainPick = getDomainForSentence(theModel, sentence);\r\n    debuglog(() => ' domainPick: ' + JSON.stringify(domainPick, undefined, 2));\r\n    var domainFixedCategories : string[] = [];\r\n    if(options && options.showURI) {\r\n      domainFixedCategories = augmentCategoriesWithURI(fixedCategories, theModel, domainPick.domain);\r\n    } else {\r\n      domainFixedCategories = fixedCategories;\r\n    }\r\n    var mongoMap = theModel.mongoHandle.mongoMaps[domainPick.collectionName];\r\n    if (!containsFixedCategories(theModel, domainPick.domain, domainFixedCategories)) {\r\n      debuglog(() => JSON.stringify(` fixed fields not present in domain ${domainPick.domain} given fields ${domainFixedCategories.join(\";\")} for ${index} `));\r\n      return undefined;\r\n    }\r\n    var res = makeAggregateFromAst(astnode, sentence, mongoMap, domainFixedCategories);\r\n    var query = res.query;\r\n    var columnsReverseMap = res.columnsReverseMap;\r\n    /*\r\n        var nodeFieldList = astnode.children[0].children[0];\r\n        var nodeFilter = astnode.children[1];\r\n        var match = mQ.makeMongoMatchFromAst(nodeFilter, sentence, mongoMap);\r\n\r\n    // TODO: be better than full unwind, use only relelvant categories!\r\n          var MongomMap = MongoMap.unwindsForNonterminalArrays(mongoMap);\r\n\r\n        var proj = mQ.makeMongoProjectionFromAst(nodeFieldList, sentence, mongoMap);\r\n        var columnsReverseMap= mQ.makeMongoColumnsFromAst(nodeFieldList, sentence, mongoMap);\r\n        var group = mQ.makeMongoGroupFromAst(nodeFieldList, sentence, mongoMap);\r\n        //   console.log(' query: ' + JSON.stringify(r)); // how to get domain?\r\n       // test.equal(domain, 'FioriBOM',' got domain');\r\n        var query = [ match, group, proj ];\r\n      */\r\n    r.domains[index] = domainPick.domain;\r\n    debuglog(() => ` mongo query for collection ${domainPick.collectionName} : ` + JSONStringify(query));\r\n    debuglog(() => ` columnmap ` + JSON.stringify(columnsReverseMap, undefined, 2));\r\n    return {\r\n      domain: domainPick.domain,\r\n      collectionName: domainPick.collectionName,\r\n      columns: columnsReverseMap.columns,\r\n      reverseMap: columnsReverseMap.reverseMap,\r\n      query: query\r\n    };\r\n  });\r\n  return res;\r\n}\r\n\r\nexport interface IProcessedMongoAnswers extends IMatch.IProcessedSentences {\r\n  queryresults: QResult[]\r\n}\r\n\r\n\r\nexport function mergeResults(r: QResult[]) {\r\n  return r;\r\n}\r\n\r\nexport function queryWithAuxCategories(query: string, theModel: IFModel.IModels, auxiliary_categories : string[]): Promise<IProcessedMongoAnswers> {\r\n  var handle = new ModelHandle(theModel);\r\n  return queryInternal(query, theModel, handle, auxiliary_categories);\r\n}\r\n\r\n\r\nexport function queryWithURI(query: string, theModel: IFModel.IModels, auxiliary_categories : string[]): Promise<IProcessedMongoAnswers> {\r\n  var handle = new ModelHandle(theModel);\r\n  return queryInternal(query, theModel, handle, [], { showURI : true });\r\n}\r\n\r\nexport function query(query: string, theModel: IFModel.IModels): Promise<IProcessedMongoAnswers> {\r\n  var handle = new ModelHandle(theModel);\r\n  return queryInternal(query, theModel, handle, []);\r\n}\r\n\r\nexport type IReverseMap = { [key: string]: string };\r\n\r\nexport function remapRecord(rec, columns: string[], reverseMap: IReverseMap): string[] {\r\n  var r = {};\r\n  Object.keys(rec).forEach(key => {\r\n    var targetKey = reverseMap[key] || key;\r\n    r[targetKey] = rec[key];\r\n  });\r\n  return columns.map(c => r[c]);\r\n};\r\n\r\n\r\nexport function remapResult(res, columns: string[], reverseMap: IReverseMap): string[][] {\r\n  return res.map(record => remapRecord(record, columns, reverseMap)\r\n  );\r\n}\r\n\r\nexport interface IQueryOptions {\r\n  showURI : boolean\r\n};\r\n\r\nexport function queryInternal(querystring: string, theModel: IFModel.IModels, handle: ModelHandle, fixedFields: string[], options? :IQueryOptions ):\r\n  Promise<IProcessedMongoAnswers> {\r\n  fixedFields = fixedFields || [];\r\n  var r = prepareQueries(querystring, theModel, fixedFields, options);\r\n  var aPromises = r.queries.map((query, index) => {\r\n    debuglog(() => `query ${index} prepared for domain ` + (query && query.domain));\r\n    if (query === undefined) {\r\n      return {\r\n        sentence: r.sentences[index],\r\n        columns: [],\r\n        results: []\r\n      } as QResult\r\n    }\r\n    return handle.query(query.domain, query.query).then(res => {\r\n      //console.log('db returned' + res);\r\n      var resClean = remapResult(res, r.queries[index].columns, query.reverseMap);\r\n      return {\r\n        domain : query.domain,\r\n        sentence: r.sentences[index],\r\n        columns: r.queries[index].columns,\r\n        results: resClean\r\n      } as QResult\r\n    }\r\n    )\r\n  }\r\n  );\r\n  var u = Promise.all<QResult>(aPromises);\r\n  var k = u.then<IProcessedMongoAnswers>(aRes => {\r\n    //   console.log(\"***here results of all queries \" + JSON.stringify(aRes, undefined, 2));\r\n    var queryresults = mergeResults(aRes);\r\n    var res2 = {\r\n      queryresults: queryresults,\r\n      errors: r.errors, // [ErError.makeError_EMPTY_INPUT()] ,\r\n      tokens: r.tokens,\r\n    } as IProcessedMongoAnswers;\r\n    return res2;\r\n  }\r\n  );\r\n  return k;\r\n}\r\n\r\n/*\r\n\r\n\r\n\r\n          export interface IWhatIsTupelAnswer {\r\n              sentence: ISentence;\r\n              record: IRecord;\r\n              categories: string[];\r\n              result: string[];\r\n              _ranking: number;\r\n          }\r\n\r\n\r\n\r\n\r\n\r\n      });\r\n    }\r\n  //  logPerf('listAllWithContext');\r\n  //  perflog(\"totalListAllWithContext\");\r\n    var aSentencesReinforced = analyzeContextString(contextQueryString, aRules);\r\n  //  perflog(\"LATWC matching records (s=\" + aSentencesReinforced.sentences.length + \")...\");\r\n    var matchedAnswers = WhatIs.matchRecordsQuickMultipleCategories(aSentencesReinforced, categories, records, domainCategoryFilter); //aTool: Array<IMatch.ITool>): any /* objectstream * / {\r\n    if(debuglog.enabled){\r\n      debuglog(\" matched Answers\" + JSON.stringify(matchedAnswers, undefined, 2));\r\n    }\r\n  //  perflog(\"filtering topRanked (a=\" + matchedAnswers.tupelanswers.length + \")...\");\r\n //   var matchedFiltered = WhatIs.filterOnlyTopRankedTupel(matchedAnswers.tupelanswers);\r\n //   if (debuglog.enabled) {\r\n //     debuglog(\"LATWC matched top-ranked Answers\" + JSON.stringify(matchedFiltered, undefined, 2));\r\n //   }\r\n  }\r\n}\r\n*/"],"sourceRoot":"ABC"}