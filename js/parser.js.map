{"version":3,"sources":["/projects/nodejs/botbuilder/mgnlq_parser1/src//projects/nodejs/botbuilder/mgnlq_parser1/src/../src/parser.ts"],"names":[],"mappings":"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","file":"parser.js","sourcesContent":["'use strict'\r\n\r\n// based on: http://en.wikibooks.org/wiki/Algorithm_implementation/Strings/Levenshtein_distance\r\n// and:  http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\r\n\r\n\r\nimport * as chevrotain from 'chevrotain';\r\nimport * as AST from './ast';\r\n\r\nimport { ASTNodeType as NT} from './ast';\r\n\r\n  // Written Docs for this tutorial step can be found here:\r\n  // https://github.com/SAP/chevrotain/blob/master/docs/tutorial/step2_parsing.md\r\n\r\n  // Tutorial Step 2:\r\n\r\n  // Adding a Parser (grammar only, only reads the input\r\n  // without any actions) using the Tokens defined in the previous step.\r\n  // modification to the grammar will be displayed in the syntax diagrams panel.\r\n\r\n/*\r\n  function a( ) :  {\r\n    GROUP?: string;\r\n    PATTERN?: RegExp;\r\n    LABEL?: string;\r\n    LONGER_ALT?: chevrotain.TokenConstructor;\r\n    POP_MODE?: boolean;\r\n    PUSH_MODE?: string;\r\n    tokenName?: string;\r\n    tokenType?: number;\r\n    extendingTokenTypes?: number[];\r\n    new (...args: any[]): chevrotain.IToken;\r\n  } {\r\n    return { new(...args{}) : function() {\r\n      return {\r\n        image : \"All\"\r\n      };\r\n    }\r\n  };\r\n  };\r\n*/\r\n\r\n  var createToken = chevrotain.createToken;\r\n  var Lexer = chevrotain.Lexer;\r\n  var Parser = chevrotain.Parser;\r\n\r\n  var WhiteSpace = createToken({name: \"WhiteSpace\", pattern: /\\s+/});\r\n\r\n  WhiteSpace.GROUP = Lexer.SKIPPED;\r\n\r\n\r\nimport { OperatorLookup as OL, Tokens as T}  from './tokens';\r\n  // whitespace is normally very common so it is placed first to speed up the lexer\r\n  var allTokens = Object.keys(T).map(key => T[key]);\r\n  /* [ FACT, And,\r\n    Describe,\r\n    First, Oldest, Latest, What,\r\n    At, Every, All, At, Least, One,\r\n    The,\r\n    LParen, RParen,\r\n\r\n\r\n   Meaning, Of, Are,  In, About, You, All,\r\n  WhiteSpace, Select, From, Where, Comma, ACategory, All,\r\n    List, Identifier, Integer, GreaterThan, LessThan, To, Relating, With];\r\n*/\r\n    var SelectLexer = new Lexer(allTokens);\r\n\r\n  // ----------------- parser -----------------\r\nfunction SelectParser(input) {\r\n    // By default if {recoveryEnabled: true} is not passed in the config object\r\n    // error recovery / fault tolerance capabilities will be disabled\r\n    var u = Parser.call(this, input, allTokens, {\r\n     // autputCst: true\r\n    });\r\n\r\n    //console.log(u);\r\n    var $ = this;\r\n\r\n    this.listAll = $.RULE('listAll', () => {\r\n      $.CONSUME(T.list);\r\n      $.OPTION(() =>\r\n        $.CONSUME(T.all)\r\n      );\r\n      var resFieldList = $.SUBRULE($.fieldList)\r\n      return resFieldList;\r\n    });\r\n\r\n/*\r\n    this.inDomain = $.RULE('inDomain', () => {\r\n      $.CONSUME(T.in);\r\n      $.CONSUME(T.domain);\r\n      $.CONSUME(T.ADomain);\r\n    });\r\n*/\r\n/*\r\n    this.selectStatement = $.RULE(\"selectStatement\", function () {\r\n      $.SUBRULE($.selectClause)\r\n      $.SUBRULE($.fromClause)\r\n      $.OPTION(function () {\r\n        $.SUBRULE($.whereClause)\r\n      });\r\n      //console.log('returning');\r\n      return { a: 123 };\r\n    });\r\n*/\r\n\r\n    this.allClause = $.RULE('allClause', function() {\r\n      $.SUBRULE($.catListOpMore);\r\n    });\r\n\r\n\r\n    this.opCat = $.RULE('opCat', function() {\r\n      $.OR([\r\n        {ALT: function() { return AST.makeNodeForToken(NT.OPFirst, $.CONSUME(T.first));}},\r\n        {ALT: function() { return AST.makeNodeForToken(NT.OPOldest, $.CONSUME(T.oldest));}},\r\n        {ALT: function() { return AST.makeNodeForToken(NT.OPNewest,$.CONSUME(T.latest));}},\r\n        {ALT: function() { return AST.makeNodeForToken(NT.OPNewest,$.CONSUME(T.newest));}}\r\n      ])\r\n    });\r\n\r\n    this.catListOpMore = $.RULE(\"catListOpMore\", function() : AST.ASTNode {\r\n       var r = undefined as AST.ASTNode;\r\n       $.OPTION(() =>\r\n          r = $.SUBRULE($.opCat)\r\n       );\r\n       r = r || AST.makeNode(NT.OPAll);\r\n       var catList = $.SUBRULE2($.categoryList);\r\n       r.children = [catList];\r\n       var inop = $.OPTION2(() => {\r\n            var op = $.SUBRULE3($.binaryFragOp);\r\n            var head = catList.children[catList.children.length-1];\r\n              op.children = [head];\r\n            var factOrAny = $.SUBRULE4($.factOrAny);\r\n            op.children.push(factOrAny);\r\n                  return op;\r\n        });\r\n       var res = $.SUBRULE($.catListTail);\r\n       var filterDom = res[0];\r\n       var filter = (filterDom || [])[0];\r\n       if(!filter && inop) {\r\n          var n =  AST.makeNode(NT.LIST);\r\n          n.children = [inop];\r\n          filter = n;\r\n       } else if(inop) {\r\n          filter.children.unshift(inop);\r\n       }\r\n       var orderBy = res[1];\r\n       if ( orderBy )\r\n         filter.children.push(orderBy);\r\n       var dom = (filterDom || [])[1];\r\n       var current = (dom) ?\r\n           AST.makeNode(NT.BINOP, r, filter, dom)\r\n        :  AST.makeNode(NT.BINOP,r, filter);\r\n       return current;\r\n       /*\r\n       var filterDom = undefined;\r\n       $.OPTION3(() => filterDom = $.SUBRULE5($.catFilter));\r\n       var filter = (filterDom || [])[0];\r\n\r\n       if(!filter && inop) {\r\n          var n =  AST.makeNode(NT.LIST);\r\n          n.children = [inop];\r\n          filter = n;\r\n       } else if(inop) {\r\n          filter.children.unshift(inop);\r\n       }\r\n       var orderBy = undefined;\r\n       $.OPTION4(() => orderBy = $.SUBRULE6($.orderBy));\r\n\r\n       var dom = (filterDom || [])[1];\r\n       var current = (dom) ?\r\n           AST.makeNode(NT.BINOP, r, filter, dom)\r\n        :  AST.makeNode(NT.BINOP,r, filter);\r\n       if(orderBy) {\r\n          orderBy[0] = current;\r\n          return orderBy;\r\n       } else {\r\n         return current;\r\n       }\r\n       */\r\n    });\r\n\r\n    this.catListTail = $.RULE(\"catListTail\", function() : AST.ASTNode[] {\r\n        var filterDom = undefined;\r\n        $.OPTION3(() => filterDom = $.SUBRULE1($.catFilter));\r\n        var filter = (filterDom || [])[0];\r\n        var orderBy = undefined;\r\n        $.OPTION4(() => orderBy = $.SUBRULE2($.orderBy));\r\n        return [ filterDom, orderBy ];\r\n        /*\r\n        if(!filter && inop) {\r\n          var n =  AST.makeNode(NT.LIST);\r\n          n.children = [inop];\r\n          filter = n;\r\n        } else if(inop) {\r\n          filter.children.unshift(inop);\r\n        }\r\n        var orderBy = undefined;\r\n        $.OPTION4(() => orderBy = $.SUBRULE6($.orderBy));\r\n\r\n        var dom = (filterDom || [])[1];\r\n        var current = (dom) ?\r\n            AST.makeNode(NT.BINOP, r, filter, dom)\r\n        :  AST.makeNode(NT.BINOP,r, filter);\r\n        if(orderBy) {\r\n          orderBy[0] = current;\r\n          return orderBy;\r\n        } else {\r\n          return current;\r\n        }\r\n        */\r\n    });\r\n\r\n\r\n    this.filterEntry = $.RULE(\"filterEntry\", function() {\r\n      $.OR([\r\n        {\r\n          ALT: function () {\r\n            $.CONSUME(T.in);\r\n          }\r\n        },\r\n        {\r\n          ALT: function () {\r\n            $.CONSUME(T.with);\r\n          }\r\n        },\r\n        {\r\n          ALT: function () {\r\n            $.CONSUME(T.for);\r\n          }\r\n        },\r\n        {\r\n          ALT: function () {\r\n            $.CONSUME(T.relating);\r\n          }\r\n        }\r\n        ]);\r\n    });\r\n\r\n\r\n    this.orderBy = $.RULE(\"orderBy\", function() {\r\n      var op = undefined;\r\n      $.OR([\r\n        {\r\n        ALT: () => {\r\n          var tok = $.CONSUME1(T.order_by)\r\n          op = AST.makeNode(NT.OPOrderBy);\r\n          op.bearer = tok;\r\n        }\r\n      },\r\n      {\r\n        ALT: () => {\r\n        var tok = $.CONSUME2(T.order_descending_by)\r\n        op = AST.makeNode(NT.OPOrderDescendingBy);\r\n        op.bearer = tok;\r\n      }\r\n      }]);\r\n      var cat = $.CONSUME3(T.CAT);\r\n      var nodeCat = AST.makeNodeForCat(cat);\r\n      op.children[0] = nodeCat;\r\n      return op;\r\n    });\r\n\r\n\r\n    this.domOrDomainDom = $.RULE(\"domOrDomainDom\", function() {\r\n      $.OPTION(() => $.CONSUME(T.domain));\r\n      var r = $.CONSUME2(T.DOM);\r\n      return AST.makeNodeForDomain(r);\r\n    });\r\n\r\n    this.catFilter = $.RULE(\"catFilter\", function() {\r\n        $.SUBRULE($.filterEntry);\r\n        var dom = undefined;\r\n        var filter = undefined;\r\n        $.OR([{\r\n          ALT: () => {\r\n              dom = $.SUBRULE1($.domOrDomainDom);\r\n              $.OPTION2(() => {\r\n                $.SUBRULE2($.filterEntry);\r\n                filter = $.SUBRULE3($.commaAndListFilter);\r\n              });\r\n          }\r\n        },\r\n        {\r\n          ALT: () => {\r\n            filter = $.SUBRULE4($.commaAndListFilter);\r\n          }\r\n        }\r\n        ]);\r\n        return [filter, dom];\r\n    });\r\n\r\n    this.categoryList = $.RULE(\"categoryList\", function () {\r\n      var r = [];\r\n      $.AT_LEAST_ONE( () => {\r\n        $.OPTION( () => {\r\n          //$.CONSUME(T.Comma);\r\n          $.OR([{ ALT: ()=> $.CONSUME(T.Comma)},\r\n            { ALT: ()=> $.CONSUME(T.and)},\r\n          ])\r\n         });\r\n        r.push(AST.makeNodeForCat($.CONSUME(T.CAT)));\r\n      });\r\n      /*\r\n      $.AT_LEAST_ONE_SEP({\r\n        SEP: T.Comma, DEF: function () {\r\n          r.push(AST.makeNodeForCat($.CONSUME(T.CAT)));\r\n        }\r\n      });\r\n      */\r\n      var res = AST.makeNode(NT.LIST);\r\n      res.children = r;\r\n      return res;\r\n    });\r\n\r\n  this.plainFact = $.RULE(\"plainFact\", () =>\r\n    AST.makeNodeForFact($.CONSUME(T.FACT))\r\n  );\r\n\r\n  this.factOrAny = $.RULE(\"factOrAny\", () =>\r\n    $.OR([\r\n        {\r\n          ALT: function () {\r\n            return AST.makeNodeForFact($.CONSUME1(T.FACT));\r\n          }\r\n        },\r\n        {\r\n          ALT: function () {\r\n            return AST.makeNodeForAny($.CONSUME2(T.AnANY));\r\n          }\r\n        }\r\n    ])\r\n  );\r\n\r\n  this.ppFactAny = $.RULE(\"opFactAny\", function (head) {\r\n    return $.OR([\r\n              {\r\n                ALT: () => {\r\n                  var op = AST.makeNode(NT.OPEqIn,head);\r\n                  var fact = $.SUBRULE($.plainFact);\r\n                  op.children.push(fact);\r\n                  return op;\r\n                }\r\n              },\r\n              {\r\n                ALT: () => {\r\n                  var op = $.SUBRULE2($.binaryValOp);\r\n                  op.children = [head];\r\n                  var fact = $.SUBRULE3($.plainFact);\r\n                  op.children.push(fact);\r\n                  return op;\r\n                }\r\n              },\r\n              {\r\n                ALT: () => {\r\n                  var op = $.SUBRULE4($.binaryFragOp);\r\n                  op.children = [head];\r\n                  var factOrAny = $.SUBRULE5($.factOrAny);\r\n                  op.children.push(factOrAny);\r\n                  return op;\r\n                }\r\n              }\r\n        ]);\r\n  });\r\n  // [ CAT? FACT ]\r\n  // TODO CAT OP CONTAINS MANY\r\n  // CAT OP FACT\r\n  // FACT\r\n  this.MoreThanLessThanExactly = $.RULE(\"MoreThanLessThanExactly\", function () {\r\n    return $.OR( [  {\r\n          ALT: () => {\r\n            var tok = $.CONSUME(T.more_than);\r\n            var op = AST.makeNode(NT.OPMoreThan);\r\n            op.bearer = tok;\r\n            var toki = $.CONSUME(T.Integer);\r\n            var numberarg = AST.makeNodeForInteger(toki);\r\n            op.children[0] = numberarg;\r\n            var tokc = $.CONSUME(T.CAT);\r\n            var cat = AST.makeNodeForCat(tokc);\r\n            op.children[1] = cat;\r\n            return op;\r\n          }\r\n        },\r\n        {\r\n          ALT: () => {\r\n            var tok = $.CONSUME(T.less_than);\r\n            var op = AST.makeNode(NT.OPLessThan);\r\n            op.bearer = tok;\r\n            var toki = $.CONSUME2(T.Integer);\r\n            var numberarg = AST.makeNodeForInteger(toki);\r\n            op.children[0] = numberarg;\r\n            var tokc = $.CONSUME2(T.CAT);\r\n            var cat = AST.makeNodeForCat(tokc);\r\n            op.children[1] = cat;\r\n            return op;\r\n          }\r\n        },\r\n        {\r\n          ALT: () => {\r\n            var tok = $.CONSUME(T.exactly);\r\n            var op = AST.makeNode(NT.OPExactly);\r\n            op.bearer = tok;\r\n            var toki = $.CONSUME3(T.Integer);\r\n            var numberarg = AST.makeNodeForInteger(toki);\r\n            op.children[0] = numberarg;\r\n            var tokc = $.CONSUME3(T.CAT);\r\n            var cat = AST.makeNodeForCat(tokc);\r\n            op.children[1] = cat;\r\n            return op;\r\n          }\r\n        },\r\n        {\r\n          ALT: () => {\r\n            var tok = $.CONSUME(T.existing);\r\n            var op = AST.makeNode(NT.OPExisting);\r\n            op.bearer = tok;\r\n            var tokc = $.CONSUME4(T.CAT);\r\n            var cat = AST.makeNodeForCat(tokc);\r\n            op.children[0] = cat;\r\n            return op;\r\n          }\r\n        },\r\n        {\r\n          ALT: () => {\r\n            var tok = $.CONSUME(T.not_existing);\r\n            var op = AST.makeNode(NT.OPNotExisting);\r\n            op.bearer = tok;\r\n            var tokc = $.CONSUME5(T.CAT);\r\n            var cat = AST.makeNodeForCat(tokc);\r\n            op.children[0] = cat;\r\n            return op;\r\n          }\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        /*,\r\n        {\r\n          ALT: () => {\r\n            console.log( 'token index is ' + T.less_than );\r\n            var tok = $.CONSUME2(T.less_than);\r\n            var op = AST.makeNode(NT.OPMoreThan);\r\n            op.bearer = tok;\r\n            var toki = $.CONSUME3(T.AnANY);\r\n            var numberarg = AST.makeNodeForInteger(toki);\r\n            op.children[0] = numberarg;\r\n            var tokc = $.CONSUME3(T.CAT);\r\n            var cat = AST.makeNodeForCat(tokc);\r\n            op.children[1] = cat;\r\n            return op;\r\n          }\r\n        }*/\r\n      ]);\r\n   });\r\n\r\n\r\n   this.catFact = $.RULE(\"catFact\", function () {\r\n    return $.OR([\r\n        {\r\n          ALT: () => {\r\n            var tok = $.CONSUME(T.CAT);\r\n            var head = AST.makeNodeForCat(tok);\r\n            var op = $.SUBRULE($.opFactAny, head);\r\n            op.children[0] = head;\r\n            return op;\r\n          }\r\n        },\r\n        {\r\n          ALT: () => {\r\n            return  $.SUBRULE($.MoreThanLessThanExactly);\r\n            /*\r\n            console.log( 'token index is ' + T.more_than );\r\n            var tok = $.CONSUME(T.more_than);\r\n            var op = AST.makeNode(NT.OPMoreThan);\r\n            op.bearer = tok;\r\n            var toki = $.CONSUME(T.Integer);\r\n            var numberarg = AST.makeNodeForInteger(toki);\r\n            op.children[0] = numberarg;\r\n            var tokc = $.CONSUME2(T.CAT);\r\n            var cat = AST.makeNodeForCat(tokc);\r\n            op.children[1] = cat;\r\n            return op;\r\n            */\r\n          }\r\n        },\r\n        {\r\n          ALT: () => {\r\n            var op = AST.makeNode(NT.OPEqIn,\r\n              AST.makeNode(AST.ASTNodeType.CATPH));\r\n            var fact = $.SUBRULE2($.plainFact);\r\n            op.children.push(fact);\r\n            return op;\r\n          }\r\n        }\r\n      ]);\r\n   });\r\n\r\n//\r\n\r\n this.commaAndListFilter = $.RULE(\"commaAndListFilter\", function () {\r\n      var r = [$.SUBRULE($.catFact)];\r\n      $.MANY( () => {\r\n        $.OPTION( () =>\r\n          //$.CONSUME(T.Comma));\r\n          $.OR( [\r\n            { ALT: function() { $.CONSUME(T.Comma); }},\r\n            { ALT: function() { $.CONSUME(T.and); }}, // not a logical and yet\r\n            { ALT: function() { $.CONSUME(T.or); }}, //not logical or yet\r\n            { ALT: function() { $.CONSUME(T.with); }}\r\n          ])\r\n        )\r\n        r.push($.SUBRULE2($.catFact));\r\n      });\r\n      //onsole.log(\"here producing\" + JSON.stringify(n));\r\n      var n =  AST.makeNode(NT.LIST);\r\n      n.children = r;\r\n      return n;\r\n    });\r\n/*\r\n  this.commaAndListTail = $.RULE(\"commaAndListTail\", function () {\r\n      //$.SUBRULE($.catFact);\r\n      $.MANY( () => {\r\n        $.CONSUME(T.Comma);\r\n        /* $.OR( [\r\n          { ALT: function() { $.CONSUME(Comma); }},\r\n          { ALT: function() { $.CONSUME(And); }}\r\n        ]); * /\r\n        $.SUBRULE($.catFact);\r\n      });\r\n      return { b: 445 };\r\n    });\r\n*/\r\n    $.RULE(\"unarySetOp\", function() {\r\n       $.OR([\r\n        {\r\n          ALT: function () {\r\n            $.CONSUME(T.all);\r\n          }\r\n        },\r\n        {\r\n          ALT: function () {\r\n            $.CONSUME(T.first);\r\n          }\r\n        },\r\n        {\r\n          ALT: function () {\r\n            $.CONSUME(T.newest);\r\n          }\r\n        },\r\n        {\r\n          ALT: function () {\r\n            $.CONSUME(T.oldest);\r\n          }\r\n        },\r\n        {\r\n          ALT: function () {\r\n            $.CONSUME(T.latest);\r\n          }\r\n        },\r\n        {\r\n          ALT: function () {\r\n            $.CONSUME(T.every);\r\n          }\r\n        },\r\n        {\r\n          ALT: function () {\r\n            $.CONSUME(T.any);\r\n          }\r\n        },\r\n        {\r\n          ALT: function () {\r\n            $.CONSUME(T.at);\r\n            $.CONSUME(T.least);\r\n            $.CONSUME(T.one);\r\n          }\r\n        },\r\n\r\n        {\r\n          ALT: function () {\r\n            $.CONSUME(T.last);\r\n          }\r\n        }\r\n      ]);\r\n  });\r\n\r\n     $.RULE(\"binaryValOp\", function() {\r\n       return $.OR([\r\n        {\r\n          ALT: function () {\r\n            $.CONSUME3(T.equals);\r\n          }\r\n        },\r\n        {\r\n          ALT: function () {\r\n            $.CONSUME4(T.is);\r\n          }\r\n        }\r\n    ]);\r\n  });\r\n\r\n  $.RULE(\"binaryFragOp\", function() {\r\n    return $.OR([\r\n    {\r\n      ALT: function () {\r\n        return AST.makeNodeForToken(NT.OPContains, $.CONSUME(T.contains));\r\n      }\r\n    },\r\n    {\r\n      ALT: function () {\r\n        return AST.makeNodeForToken(NT.OPContains, $.CONSUME1(T.containing));\r\n      }\r\n    },\r\n    {\r\n      ALT: function () {\r\n          return AST.makeNodeForToken(NT.OPEndsWith, $.CONSUME2(T.ends_with));\r\n      }\r\n    },\r\n    {\r\n      ALT: function () {\r\n          return AST.makeNodeForToken(NT.OPEndsWith, $.CONSUME3(T.ending_with));\r\n      }\r\n    },\r\n    {\r\n      ALT: function () {\r\n        return AST.makeNodeForToken(NT.OPStartsWith, $.CONSUME4(T.starting_with));\r\n      }\r\n    },\r\n    {\r\n      ALT: function () {\r\n        return AST.makeNodeForToken(NT.OPStartsWith, $.CONSUME5(T.starts_with));\r\n      }\r\n    },\r\n    {\r\n      ALT: function () {\r\n        return $.SUBRULE2($.opBinaryCompare);\r\n      }\r\n    }\r\n  ]);\r\n});\r\n\r\n$.RULE(\"opBinaryCompare\", function() {\r\n  return $.OR([\r\n  {\r\n    ALT: function () {\r\n      return AST.makeNodeForToken(NT.OPLT, $.CONSUME1(T.LT));\r\n    }\r\n  },\r\n  {\r\n    ALT: function () {\r\n      return AST.makeNodeForToken(NT.OPLE, $.CONSUME2(T.LE));\r\n    }\r\n  },\r\n  {\r\n    ALT: function () {\r\n      return AST.makeNodeForToken(NT.OPGT, $.CONSUME3(T.GT));\r\n    }\r\n  },\r\n  {\r\n    ALT: function () {\r\n      return AST.makeNodeForToken(NT.OPGE, $.CONSUME4(T.GE));\r\n    }\r\n  },\r\n  {\r\n    ALT: function () {\r\n      return AST.makeNodeForToken(NT.OPEQ, $.CONSUME5(T.EQ));\r\n    }\r\n  },\r\n  {\r\n    ALT: function () {\r\n      return AST.makeNodeForToken(NT.OPNE, $.CONSUME6(T.NE));\r\n    }\r\n  }\r\n  ]);\r\n});\r\n\r\n\r\n/// Where  First (CAT  GE  X  )\r\n\r\n/*\r\n    $.RULE(\"catSetExpression\", function() {\r\n      $.OPTION($.SUBRULE($.unarySetOp));\r\n      $.CONSUME(T.CAT);\r\n    })\r\n*/\r\n    //  lowest precedence thus it is first in the rule chain\r\n    // The precedence of binary expressions is determined by how far down the Parse Tree\r\n    // The binary expression appears.\r\n\r\n    /*\r\n    $.RULE(\"filterExpression\", function() {\r\n        var value, op, rhsVal;\r\n\r\n        // parsing part\r\n        value = $.SUBRULE($.catSetExpression);\r\n        $.OR([ { ALT: function() {\r\n          $.AT_LEAST_O(function() {\r\n              // consuming 'AdditionOperator' will consume either Plus or Minus as they are subclasses of AdditionOperator\r\n              op = $.SUBRULE1($.binaryValOp);\r\n              //  the index \"2\" in SUBRULE2 is needed to identify the unique position in the grammar during runtime\r\n              rhsVal = $.CONSUME(T.AFact);\r\n              // TODO logical expr\r\n          });\r\n          return value;\r\n        }},\r\n        { ALT: function() { $.CONSUME2(T.AFact); }\r\n        }\r\n        ]);\r\n    });\r\n    */\r\n\r\n/*\r\n    $.RULE(\"xatomicExpression\", function() {\r\n        return $.OR([\r\n            // parenthesisExpression has the highest precedence and thus it appears\r\n            // in the \"lowest\" leaf in the expression ParseTree.\r\n            {ALT: function() { return $.SUBRULE($.parenthesisExpression)}},\r\n            {ALT: function() { return parseInt($.CONSUME(T.Integer).image, 10)}},\r\n            {ALT: function() { return $.SUBRULE($.powerFunction)}}\r\n        ]);\r\n    });\r\n*/\r\n\r\n/*\r\n    $.RULE(\"parenthesisExpression\", function() {\r\n        var expValue;\r\n        $.CONSUME(T.LParen);\r\n        expValue = $.SUBRULE($.expression);\r\n        $.CONSUME(T.RParen);\r\n        return expValue\r\n    });\r\n*/\r\n/*\r\n\r\n    this.selectClause = $.RULE(\"selectClause\", function () {\r\n      $.CONSUME(T.select);\r\n      $.AT_LEAST_ONE_SEP({\r\n        SEP: T.Comma, DEF: function () {\r\n          $.CONSUME(T.Identifier);\r\n        }\r\n      });\r\n      return { b: 445 };\r\n    });\r\n*/\r\n\r\n/*\r\n    this.fromClause = $.RULE(\"fromClause\", function () {\r\n      $.CONSUME(T.from);\r\n      $.CONSUME(T.Identifier);\r\n\r\n      // example:\r\n      // replace the contents of this rule with the commented out lines\r\n      // below to implement multiple tables to select from (implicit join).\r\n\r\n      // $.CONSUME(From);\r\n      // $.AT_LEAST_ONE_SEP({\r\n      //   SEP: Comma, DEF: function () {\r\n      //     $.CONSUME(Identifier);\r\n      //   }\r\n      // });\r\n    });\r\n*/\r\n\r\n    this.fieldList = $.RULE(\"fieldList\", function () {\r\n      var res = [];\r\n      $.AT_LEAST_ONE_SEP({\r\n        SEP: T.Comma, DEF : function () {\r\n           var atok =  $.CONSUME(T.CAT);\r\n          // console.log(\"token \" + JSON.stringify(atok));\r\n           res.push(atok);\r\n        }\r\n      });\r\n      return res;\r\n    });\r\n\r\n/*\r\n    this.whereClause = $.RULE(\"whereClause\", function () {\r\n      $.CONSUME(T.where)\r\n      $.SUBRULE($.expression)\r\n    });\r\n\r\n\r\n    this.expression = $.RULE(\"expression\", function () {\r\n      $.SUBRULE($.atomicExpression);\r\n      $.SUBRULE($.relationalOperator);\r\n      $.SUBRULE2($.atomicExpression); // note the '2' suffix to distinguish\r\n                      // from the 'SUBRULE(atomicExpression)'\r\n                      // 2 lines above.\r\n    });\r\n\r\n\r\n    this.atomicExpression = $.RULE(\"atomicExpression\", function () {\r\n      $.OR([\r\n        {ALT: function () { $.CONSUME(T.Integer)}},\r\n        {ALT: function () { $.CONSUME(T.Identifier)}}\r\n      ]);\r\n    });\r\n\r\n\r\n    this.relationalOperator = $.RULE(\"relationalOperator\", function () {\r\n      $.OR([\r\n        {ALT: function () { $.CONSUME(T.GT)}},\r\n        {ALT: function () { $.CONSUME(T.LT)}}\r\n      ]);\r\n    });\r\n*/\r\n    // very important to call this after all the rules have been defined.\r\n    // otherwise the parser may not work correctly as it will lack information\r\n    // derived during the self analysis phase.\r\n    (Parser as any).performSelfAnalysis(this);\r\n  }\r\n\r\n  SelectParser.prototype = Object.create(Parser.prototype);\r\n  SelectParser.prototype.constructor = SelectParser;\r\n\r\n//\r\nexport {\r\n   SelectLexer,\r\n   SelectParser\r\n   // defaultRule : \"selectStatement\"\r\n};\r\n"],"sourceRoot":"src/"}