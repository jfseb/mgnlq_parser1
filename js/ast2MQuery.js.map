{"version":3,"sources":["/projects/nodejs/botbuilder/abot_stringdist/src/../src/ast2MQuery.ts"],"names":[],"mappings":"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","file":"ast2MQuery.js","sourcesContent":["'use strict'\r\n\r\n// based on: http://en.wikibooks.org/wiki/Algorithm_implementation/Strings/Levenshtein_distance\r\n// and:  http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\r\n\r\nimport * as mongoose from 'mongoose';\r\n//import * as m2s from './model2schema.js';\r\n\r\nimport { ErBase as ErBase, Sentence as Sentence, IFErBase as IFErBase } from 'mgnlq_er';\r\n\r\nimport * as debug from 'debugf';\r\n\r\nimport * as Model from 'mgnlq_model';\r\n\r\nconst debuglog = debug('ast2MQuery');\r\n\r\nimport * as chevrotain from 'chevrotain';\r\nimport * as AST from './ast';\r\n\r\nimport { ASTNodeType as NT} from './ast';\r\n\r\nimport * as Sentenceparser from './sentenceparser';\r\n\r\nvar createToken = chevrotain.createToken;\r\nvar Lexer = chevrotain.Lexer;\r\nvar Parser = chevrotain.Parser;\r\n\r\nexport interface IFilter {\r\n  cat : string,\r\n  value : string\r\n};\r\n\r\n/* construct a mongo query from an AST */\r\n\r\nexport function makeMongoDistinctGroup(cols : string[]) : any {\r\n  var res = { $group : { _id : {} } };\r\n  cols.forEach(col => {\r\n    res.$group[col] = '$' + col;\r\n    res.$group._id[col]  = '$' + col;\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function getCategoryForNodePair(nodeCat : AST.ASTNode, nodeFact : AST.ASTNode , sentence: IFErBase.ISentence) {\r\n  var startIndex = nodeCat && nodeCat.bearer && nodeCat.bearer.startOffset;\r\n  debug('StartIndex : ' + startIndex);\r\n  debug('StartIndex : ' + JSON.stringify(nodeCat,undefined,2));\r\n  if (typeof startIndex === \"number\" && (startIndex >= 0) ) {\r\n    return sentence[startIndex].matchedString;\r\n  }\r\n  if(!nodeCat || nodeCat.children.length === 0 || nodeCat.bearer === undefined) {\r\n    var factIndex = nodeFact.bearer.startOffset;\r\n    debug(JSON.stringify(sentence[factIndex], undefined, 2));\r\n    return sentence[factIndex].category;\r\n  }\r\n};\r\n\r\nexport function getCategoryForNode(nodeCat : AST.ASTNode, sentence: IFErBase.ISentence) {\r\n  var startIndex = nodeCat && nodeCat.bearer && nodeCat.bearer.startOffset;\r\n  if (nodeCat.type !== NT.CAT) {\r\n      throw new Error(`Expected nodetype ${new AST.NodeType(NT.CAT).toString()} but was ${new AST.NodeType(nodeCat.type).toString()}`);\r\n  }\r\n  if (startIndex !== undefined && (startIndex >= 0) ) {\r\n    return sentence[startIndex].matchedString;\r\n  }\r\n  throw new Error(' no startindex' + JSON.stringify(nodeCat));\r\n};\r\n\r\nexport function getFactForNode(nodeFact : AST.ASTNode , sentence: IFErBase.ISentence) {\r\n  var factIndex = nodeFact.bearer.startOffset;\r\n    //console.log(JSON.stringify(sentence[factIndex], undefined, 2));\r\n  return sentence[factIndex].matchedString; //.category;\r\n};\r\n\r\nexport function makeMongoName(s : string) : string {\r\n  return s.replace(/[^a-zA-Z0-9]/g,'_');\r\n}\r\n\r\nfunction makeFilterObj(cat,filter) {\r\n    var filterObj = { };\r\n    filterObj[cat] = filter;\r\n    return filterObj;\r\n}\r\n\r\nexport function addFilterToMatch(res,cat,filter) {\r\n  if(res['$and']) {\r\n    res['$and'].push(makeFilterObj(cat,filter));\r\n    return res;\r\n  }\r\n  if(res[cat]) {\r\n    var filters = Object.keys(res).sort().map(key => makeFilterObj(key,res[key]));\r\n    filters.push(makeFilterObj(cat,filter));\r\n    return { $and : filters };\r\n  }\r\n  res[cat] = filter;\r\n  return res;\r\n};\r\n\r\nexport function makeMongoMatchFromAst(node : AST.ASTNode, sentence : IFErBase.ISentence, theModel: Model.IFModel.IModels) {\r\n  debug(AST.astToText(node));\r\n  //console.log(\"making mongo match \" + AST.astToText(node));\r\n  if(!node) {\r\n    return { $match : { }};\r\n  }\r\n  if(node.type !== NT.LIST) {\r\n    throw new Error('expected different nodetype ' + node.type );\r\n  }\r\n  var res = {};\r\n  node.children.forEach(n => {\r\n    var cat = getCategoryForNodePair(n.children[0], n.children[1], sentence);\r\n    cat = makeMongoName(cat);\r\n    var fact = getFactForNode(n.children[1], sentence);\r\n    if (n.type === NT.OPEqIn) {\r\n      res = addFilterToMatch(res,cat,fact);\r\n    } else if( n.type === NT.OPStartsWith) {\r\n           res = addFilterToMatch(res,cat, { $regex : new RegExp(`^${fact.toLowerCase()}`,\"i\") });\r\n    } else if( n.type === NT.OPEndsWith) {\r\n          debuglog(()=>'!!!!adding regex with expression ' + fact.toLowerCase()  );\r\n          res = addFilterToMatch(res,cat,{ $regex : new RegExp(`${fact.toLowerCase()}$`,\"i\") });\r\n    }\r\n    else if( n.type === NT.OPContains) {\r\n         res = addFilterToMatch(res,cat, { $regex : new RegExp(`${fact.toLowerCase()}`,\"i\") });\r\n    }\r\n    else {\r\n      throw new Error('Expected nodetype NT.OPEqIn but was ' + n.type);\r\n    }\r\n  });\r\nreturn { $match : res};\r\n}\r\n\r\n\r\n\r\nexport function makeMongoGroupFromAst(node : AST.ASTNode, sentence : IFErBase.ISentence, theModel: Model.IFModel.IModels) {\r\n  debug(AST.astToText(node));\r\n  if(node.type !== NT.LIST) {\r\n    throw new Error('expected different nodetype ' + node.type );\r\n  }\r\n  var res = {};\r\n  node.children.forEach(n => {\r\n    if (n.type === NT.CAT) {\r\n      var cat = getCategoryForNode(n, sentence);\r\n      cat = makeMongoName(cat);\r\n      res[cat] = '$' + cat;\r\n     } else {\r\n      throw new Error(`Expected nodetype ${new AST.NodeType(NT.CAT).toString()} but was ${new AST.NodeType(n.type).toString()}`);\r\n    }\r\n  });\r\n  var r1 = { $group: Object.assign({ _id: Object.assign({}, res)}, {}) };\r\n  var firstX = {};\r\n  Object.keys(res).forEach(key => { firstX[key] = { $first: '$' + key }});\r\n  r1.$group = Object.assign(r1.$group,firstX);\r\n  return r1;\r\n}\r\n\r\nexport function makeMongoColumnsFromAst(node : AST.ASTNode, sentence : IFErBase.ISentence, theModel: Model.IFModel.IModels)\r\n: { columns: string[], reverseMap :{ [key: string] : string }} {\r\n  debug(AST.astToText(node));\r\n  if(node.type !== NT.LIST) {\r\n    throw new Error('expected different nodetype ' + node.type );\r\n  }\r\n  var res = { columns : [],\r\n              reverseMap : {} };\r\n  node.children.forEach(n => {\r\n    if (n.type === NT.CAT) {\r\n      var cat = getCategoryForNode(n, sentence);\r\n      res.columns.push(cat);\r\n      var catmongo = makeMongoName(cat);\r\n      if( cat !== catmongo) {\r\n        res.reverseMap[catmongo] = cat;\r\n      }\r\n     } else {\r\n      throw new Error(`Expected nodetype ${new AST.NodeType(NT.CAT).toString()} but was ${new AST.NodeType(n.type).toString()}`);\r\n    }\r\n  });\r\n  return res;\r\n}\r\n\r\n\r\n\r\n\r\nexport function makeMongoProjectionFromAst(node : AST.ASTNode, sentence : IFErBase.ISentence, theModel: Model.IFModel.IModels) {\r\n  debug(AST.astToText(node));\r\n  if(node.type !== NT.LIST) {\r\n    throw new Error('expected different nodetype ' + node.type );\r\n  }\r\n  var res = { _id : 0 };\r\n  node.children.forEach(n => {\r\n    if (n.type === NT.CAT) {\r\n      var cat = getCategoryForNode(n, sentence);\r\n      cat = makeMongoName(cat);\r\n      res[cat] = 1;\r\n     } else {\r\n      throw new Error(`Expected nodetype ${new AST.NodeType(NT.CAT).toString()} but was ${new AST.NodeType(n.type).toString()}`);\r\n    }\r\n  });\r\n  return { $project : res};\r\n}\r\n\r\n\r\nexport function makeMongoMatchF(filters: IFilter[]) {\r\n  var res = { $match : {}};\r\n  //console.log('is match \\n');\r\n  filters.forEach(filter => {\r\n    res.$match[ filter.cat ] = filter.value;\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function makeMongoProjection(cols : string[]) : any {\r\n  var res = { $project : { _id : 0 } };\r\n  cols.forEach(col => {\r\n    res.$project[col] = 1;\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function makeMongoQuery(filters : IFilter[], resultcolumns : string[]) : any {\r\n  var filter = makeMongoMatchF(filters);\r\n  var group = makeMongoDistinctGroup(resultcolumns);\r\n  var projection = makeMongoProjection(resultcolumns);\r\n  return [filter,group,projection];\r\n\r\n}\r\n\r\n\r\n"],"sourceRoot":"ABC"}