{"version":3,"sources":["/projects/nodejs/botbuilder/mgnlq_parser1/src//projects/nodejs/botbuilder/mgnlq_parser1/src/../src/ast2query/ast2MQuery.ts"],"names":[],"mappings":"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","file":"ast2MQuery.js","sourcesContent":["'use strict'\r\n\r\n// based on: http://en.wikibooks.org/wiki/Algorithm_implementation/Strings/Levenshtein_distance\r\n// and:  http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\r\n\r\nimport * as mongoose from 'mongoose';\r\n//import * as m2s from './model2schema.js';\r\n\r\nimport { Sentence as Sentence, IFErBase as IFErBase } from '../match/er_index';\r\n\r\nimport * as debug from 'debugf';\r\n\r\nimport * as Model from 'mgnlq_model';\r\nimport { IFModel as IFModel, MongoMap } from 'mgnlq_model';\r\n\r\nconst debuglog = debug('ast2MQuery');\r\n\r\nimport * as chevrotain from 'chevrotain';\r\nimport * as AST from '../ast';\r\n\r\nimport { ASTNodeType as NT } from '../ast';\r\n\r\n// import * as Sentenceparser from '../sentenceparser';\r\n\r\nvar createToken = chevrotain.createToken;\r\nvar Lexer = chevrotain.Lexer;\r\nvar Parser = chevrotain.Parser;\r\n\r\nexport interface IFilter {\r\n  cat: string,\r\n  value: string\r\n};\r\n\r\n/* construct a mongo query from an AST */\r\n\r\nexport function makeMongoDistinctGroup(cols: string[]): any {\r\n  var res = { $group: { _id: {} } };\r\n  cols.forEach(col => {\r\n    res.$group[col] = '$' + col;\r\n    res.$group._id[col] = '$' + col;\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function getCategoryForNodePair(nodeCat : AST.ASTNode, nodeFact: AST.ASTNode, sentence: IFErBase.ISentence) {\r\n\r\n  //  either           <CAT> <FACT>\r\n  //  or               undefined <FACT>\r\n  //  or  More than    <number> <CAT>\r\n  if ( nodeCat && nodeCat.bearer && nodeCat.bearer.image === 'NUMBER' )\r\n  {\r\n    return getCategoryForNodePair(nodeFact, nodeFact, sentence);\r\n  }\r\n  var startIndex = nodeCat && nodeCat.bearer && nodeCat.bearer.startOffset;\r\n  debug('StartIndex : ' + startIndex);\r\n  debug('StartIndex : ' + JSON.stringify(nodeCat, undefined, 2));\r\n  if (typeof startIndex === \"number\" && (startIndex >= 0)) {\r\n    return sentence[startIndex].matchedString;\r\n  }\r\n  if (!nodeCat || nodeCat.children.length === 0 || nodeCat.bearer === undefined) {\r\n    var factIndex = nodeFact.bearer.startOffset;\r\n    debug(JSON.stringify(sentence[factIndex], undefined, 2));\r\n    return sentence[factIndex].category;\r\n  }\r\n  debug(' found no category ');\r\n  return undefined;\r\n};\r\n\r\nexport function getCategoryForNode(nodeCat: AST.ASTNode, sentence: IFErBase.ISentence) {\r\n  var startIndex = nodeCat && nodeCat.bearer && nodeCat.bearer.startOffset;\r\n  if (nodeCat.type !== NT.CAT) {\r\n    throw new Error(`Expected nodetype ${new AST.NodeType(NT.CAT).toString()} but was ${new AST.NodeType(nodeCat.type).toString()}`);\r\n  }\r\n  if (startIndex !== undefined && (startIndex >= 0)) {\r\n    return sentence[startIndex].matchedString;\r\n  }\r\n  throw new Error(' no startindex' + JSON.stringify(nodeCat));\r\n};\r\n\r\nexport function getFactForNode(nodeFact: AST.ASTNode, sentence: IFErBase.ISentence) {\r\n  var factIndex = nodeFact.bearer.startOffset;\r\n  //console.log(JSON.stringify(sentence[factIndex], undefined, 2));\r\n  return sentence[factIndex].matchedString; //.category;\r\n};\r\n\r\nexport function makeMongoName(s: string): string {\r\n  return MongoMap.makeMongoNameLC(s);\r\n  //return s.replace(/[^a-zA-Z0-9]/g,'_');\r\n}\r\n\r\nfunction makeFilterObj(cat, filter) {\r\n  var filterObj = {};\r\n  filterObj[cat] = filter;\r\n  return filterObj;\r\n}\r\n\r\nexport function addFilterToMatch(res, cat, filter) {\r\n  if (res['$and']) {\r\n    res['$and'].push(makeFilterObj(cat, filter));\r\n    return res;\r\n  }\r\n  if (res[cat]) {\r\n    var filters = Object.keys(res).sort().map(key => makeFilterObj(key, res[key]));\r\n    filters.push(makeFilterObj(cat, filter));\r\n    return { $and: filters };\r\n  }\r\n  res[cat] = filter;\r\n  return res;\r\n};\r\n\r\nexport function addFilterExpr(res, expr : any ) {\r\n  if (res['$and']) {\r\n    res['$and'].push(expr);\r\n    return res;\r\n  }\r\n  res['$and'] = [ expr ];\r\n  return res;\r\n};\r\n\r\n\r\n\r\nexport function getNumberArg( node :AST.ASTNode , sentence: IFErBase.ISentence ) : number\r\n{\r\n  var startIndex = node && node.bearer && node.bearer.startOffset;\r\n  if (node.type !== NT.NUMBER) {\r\n    throw new Error(`Expected nodetype ${new AST.NodeType(NT.CAT).toString()} but was ${new AST.NodeType(node.type).toString()}`);\r\n  }\r\n  if (startIndex !== undefined && (startIndex >= 0)) {\r\n    //TODO treat one, two\r\n    return parseInt(sentence[startIndex].matchedString);\r\n  }\r\n  throw new Error(' no startindex' + JSON.stringify(node));\r\n};\r\n\r\n\r\nexport function makeMongoMatchFromAst(node: AST.ASTNode, sentence: IFErBase.ISentence, mongoMap: IFModel.CatMongoMap) {\r\n  debug(AST.astToText(node));\r\n  //console.log(\"making mongo match \" + AST.astToText(node));\r\n  if (!node) {\r\n    return { $match: {} };\r\n  }\r\n  if (node.type !== NT.LIST) {\r\n    throw new Error('expected different nodetype ' + node.type);\r\n  }\r\n  var res = {};\r\n  node.children.forEach(n => {\r\n    var category = getCategoryForNodePair(n.children[0], n.children[1], sentence);\r\n    //console.log('here is the domain ' + mongodomain);\r\n    //console.log('here is the domain ' + Object.keys(theModel.mongoHandle.mongoMaps).join(\"\\n\"));\r\n\r\n    //console.log(JSON.stringify(theModel.mongoHandle.mongoMaps[mongodomain], undefined,2));\r\n    var mongocatfullpath = mongoMap[category].fullpath; // Model.getMongoosePath(theModel, category); //makeMongoName(cat);\r\n    debuglog(() => `here is the fullpath for ${category} is ${mongocatfullpath} `);\r\n    var fact = getFactForNode(n.children[1], sentence);\r\n    if (n.type === NT.OPEqIn) {\r\n      res = addFilterToMatch(res, mongocatfullpath, fact);\r\n    } else if (n.type === NT.OPStartsWith) {\r\n      res = addFilterToMatch(res, mongocatfullpath, { $regex: new RegExp(`^${fact.toLowerCase()}`, \"i\") });\r\n    } else if (n.type === NT.OPEndsWith) {\r\n      debuglog(() => '!!!!adding regex with expression ' + fact.toLowerCase());\r\n      res = addFilterToMatch(res, mongocatfullpath, { $regex: new RegExp(`${fact.toLowerCase()}$`, \"i\") });\r\n    } else if (n.type === NT.OPMoreThan) {\r\n      var numberarg = getNumberArg(n.children[0], sentence);\r\n      debuglog(() => '!!!!adding more than ' + numberarg + ' for category ' + category );\r\n      //TODO //res = addFilterToMatch(res, mongocatfullpath, { 'count' ( mongocatfullpath ) gt numberarg , \"i\") });\r\n      var argpath = '$' + mongocatfullpath;\r\n      res = addFilterExpr( res,\r\n        { $expr: { $gt: [ { $switch: { branches: [ { case: { $isArray : argpath }, then: { $size: argpath } }], default : 1 }}\r\n                        , numberarg ]}} );\r\n\r\n//\r\n//        { $expr: { $gt: [ { $size: '$standort'},1 ]}} );\r\n//      ([ { $match : { $expr: { $gt: [ { $size: argpath }, numberarg ]}}}]);\r\n// two stage\r\n// use $addFields  with 3.4\r\n// try also $expr directly\r\n//       > db.demomdls.aggregate([ { $project : { standort_size : { $size: '$standort' }, standort:1, sender:1, uu : { $gt:[ { $size: '$standort' },3]} , abx : { $gt:[ \"$standort\", 1]}}}, { $match: { \"standort_size\": { $eq: { $size: '$standort'} }}}]);\r\n//      > db.demomdls.aggregate([ { $project : { standort_size : { $size: '$standort' }, standort:1, sender:1, uu : { $gt:[ { $size: '$standort' },3]} , abx : { $gt:[ \"$standort\", 1]}}}, { $match: { \"standort_size\": { $gt: 1 }}}]);\r\n//      { \"_id\" : ObjectId(\"5db88a185b66759cfc56bcd4\"), \"standort\" : [ \"Berlin\", \"München\", \"Frankfurt\", \"Hamburg\", \"Bremen\" ], \"sender\" : \"ARundfunkD\", \"standort_size\" : 5, \"uu\" : true, \"abx\" : true }\r\n\r\n\r\n    // exact match: db.demomdls.aggregate([ { $match: { standort : { $size : 3 }}},\r\n\r\n    }\r\n    else if (n.type === NT.OPLessThan) {\r\n      var numberarg = getNumberArg(n.children[0], sentence);\r\n      debuglog(() => '!!!!adding more than ' + numberarg + ' for category ' + category );\r\n      //TODO //res = addFilterToMatch(res, mongocatfullpath, { 'count' ( mongocatfullpath ) gt numberarg , \"i\") });\r\n      var argpath = '$' + mongocatfullpath;\r\n      res = addFilterExpr( res,\r\n        { $expr: { $lt: [ { $switch: { branches: [ { case: { $isArray : argpath }, then: { $size: argpath } }], default : 1 }}\r\n                        , numberarg ]}} );\r\n    } else if (n.type === NT.OPExactly) {\r\n      var numberarg = getNumberArg(n.children[0], sentence);\r\n      debuglog(() => '!!!!adding more than ' + numberarg + ' for category ' + category );\r\n      //TODO //res = addFilterToMatch(res, mongocatfullpath, { 'count' ( mongocatfullpath ) gt numberarg , \"i\") });\r\n      var argpath = '$' + mongocatfullpath;\r\n      res = addFilterExpr( res,\r\n        { $expr: { $eq: [ { $switch: { branches: [ { case: { $isArray : argpath }, then: { $size: argpath } }], default : 1 }}\r\n                        , numberarg ]}} );\r\n    }\r\n    else if (n.type === NT.OPContains) {\r\n      res = addFilterToMatch(res, mongocatfullpath, { $regex: new RegExp(`${fact.toLowerCase()}`, \"i\") });\r\n    }\r\n    else {\r\n      throw new Error('Expected nodetype NT.OPEqIn but was ' + n.type);\r\n    }\r\n  });\r\n  return { $match: res };\r\n}\r\n\r\nexport function makeMongoGroupFromAst(categoryList : string[], mongoMap: IFModel.CatMongoMap) {\r\n  var res = {};\r\n  categoryList.forEach(category => {\r\n    var mongocatfullpath = MongoMap.getFirstSegment(mongoMap[category].paths); // Model.getMongoosePath(theModel, category); //makeMongoName(cat);\r\n    res[mongocatfullpath] = '$' + mongocatfullpath;\r\n  });\r\n  var r1 = { $group: Object.assign({ _id: Object.assign({}, res) }, {}) };\r\n  var firstX = {};\r\n  Object.keys(res).forEach(key => { firstX[key] = { $first: '$' + key } });\r\n  r1.$group = Object.assign(r1.$group, firstX);\r\n  return r1;\r\n}\r\n\r\nexport function makeMongoColumnsFromAst(categoryList : string[], mongoMap: IFModel.CatMongoMap)\r\n  : { columns: string[], reverseMap: { [key: string]: string } } {\r\n  var res = {\r\n    columns: [],\r\n    reverseMap: {}\r\n  };\r\n  categoryList.forEach(category => {\r\n    res.columns.push(category);\r\n    var catmongo = MongoMap.getShortProjectedName(mongoMap, category);\r\n    if (category !== catmongo) {\r\n      res.reverseMap[catmongo] = category;\r\n    }\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function getCategoryList(fixedCategories: string[], node: AST.ASTNode, sentence: IFErBase.ISentence): string[] {\r\n  var res = fixedCategories.slice();\r\n  debug(AST.astToText(node));\r\n  if (node.type !== NT.LIST) {\r\n    throw new Error('expected different nodetype ' + node.type);\r\n  }\r\n  node.children.map(n => {\r\n    if (n.type === NT.CAT) {\r\n      var category = getCategoryForNode(n, sentence);\r\n      if (res.indexOf(category) < fixedCategories.length) {\r\n        res.push(category);\r\n      }\r\n    } else {\r\n      throw new Error(`Expected nodetype ${new AST.NodeType(NT.CAT).toString()} but was ${new AST.NodeType(n.type).toString()}`);\r\n    }\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function makeMongoProjectionFromAst(categoryList: string[], mongoMap: IFModel.CatMongoMap) {\r\n  var res = { _id: 0 };\r\n  categoryList.map(category => {\r\n    var mongocatfullpath = mongoMap[category].fullpath; //makeMongoName(cat);\r\n    var shortName = MongoMap.getShortProjectedName(mongoMap, category);\r\n    if (shortName === mongocatfullpath) {\r\n      res[mongocatfullpath] = 1;\r\n    } else {\r\n      res[shortName] = \"$\" + mongocatfullpath;\r\n    }\r\n  });\r\n  return { $project: res };\r\n}\r\n\r\n\r\n\r\nexport function makeMongoSortFromAst(categoryList: string[], mongoMap: IFModel.CatMongoMap) {\r\n  var res = {};\r\n  categoryList.forEach(category => {\r\n    var shortName = MongoMap.getShortProjectedName(mongoMap, category);\r\n    res[shortName] = 1;\r\n  });\r\n  return { $sort: res };\r\n}\r\n\r\n\r\nexport function makeMongoMatchF(filters: IFilter[]) {\r\n  var res = { $match: {} };\r\n  //console.log('is match \\n');\r\n  filters.forEach(filter => {\r\n    res.$match[filter.cat] = filter.value;\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function makeMongoProjection(cols: string[]): any {\r\n  var res = { $project: { _id: 0 } };\r\n  cols.forEach(col => {\r\n    res.$project[col] = 1;\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function makeMongoQuery(filters: IFilter[], resultcolumns: string[]): any {\r\n  var filter = makeMongoMatchF(filters);\r\n  var group = makeMongoDistinctGroup(resultcolumns);\r\n  var projection = makeMongoProjection(resultcolumns);\r\n  return [filter, group, projection];\r\n\r\n}\r\n\r\n\r\n"],"sourceRoot":"ABC"}