{"version":3,"sources":["../src/ast2query/ast2MQuery.ts"],"names":[],"mappings":"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","file":"ast2MQuery.d.ts","sourcesContent":["'use strict'\r\n\r\n// based on: http://en.wikibooks.org/wiki/Algorithm_implementation/Strings/Levenshtein_distance\r\n// and:  http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\r\n\r\nimport * as mongoose from 'mongoose';\r\n//import * as m2s from './model2schema.js';\r\n\r\nimport { Sentence as Sentence, IFErBase as IFErBase } from '../match/er_index';\r\n\r\nimport * as debug from 'debugf';\r\nimport * as _ from 'lodash';\r\n\r\n//import * as Model from 'mgnlq_model';\r\nimport { IFModel as IFModel, MongoMap, Model as Model } from 'mgnlq_model';\r\n\r\nconst debuglog = debug('ast2MQuery');\r\n\r\nimport * as chevrotain from 'chevrotain';\r\nimport * as AST from '../ast';\r\n\r\nimport { ASTNodeType as NT } from '../ast';\r\n\r\n// import * as Sentenceparser from '../sentenceparser';\r\n\r\nvar createToken = chevrotain.createToken;\r\nvar Lexer = chevrotain.Lexer;\r\nvar Parser = chevrotain.Parser;\r\n\r\nexport interface IFilter {\r\n  cat: string,\r\n  value: string\r\n};\r\n\r\n/* construct a mongo query from an AST */\r\n\r\nexport function makeMongoDistinctGroup(cols: string[]): any {\r\n  var res = { $group: { _id: {} } };\r\n  cols.forEach(col => {\r\n    res.$group[col] = '$' + col;\r\n    res.$group._id[col] = '$' + col;\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function getCategoryForNodePair(nodeCat : AST.ASTNode, nodeFact: AST.ASTNode, sentence: IFErBase.ISentence) {\r\n\r\n  //  either           <CAT> <FACT>\r\n  //  or               undefined <FACT>\r\n  //  or  More than    <number> <CAT>\r\n  if ( nodeCat && nodeCat.bearer && nodeCat.bearer.image === 'NUMBER' )\r\n  {\r\n    return getCategoryForNodePair(nodeFact, nodeFact, sentence);\r\n  }\r\n  var startIndex = nodeCat && nodeCat.bearer && nodeCat.bearer.startOffset;\r\n  debug('StartIndex : ' + startIndex);\r\n  debug('StartIndex : ' + JSON.stringify(nodeCat, undefined, 2));\r\n  if (typeof startIndex === \"number\" && (startIndex >= 0)) {\r\n    return sentence[startIndex].matchedString;\r\n  }\r\n  if (!nodeCat || nodeCat.children.length === 0 || nodeCat.bearer === undefined) {\r\n    var factIndex = nodeFact.bearer.startOffset;\r\n    debug(JSON.stringify(sentence[factIndex], undefined, 2));\r\n    return sentence[factIndex].category;\r\n  }\r\n  debug(' found no category ');\r\n  return undefined;\r\n};\r\n\r\nexport function getCategoryForNode(nodeCat: AST.ASTNode, sentence: IFErBase.ISentence) {\r\n  var startIndex = nodeCat && nodeCat.bearer && nodeCat.bearer.startOffset;\r\n  if (nodeCat.type !== NT.CAT) {\r\n    throw new Error(`Expected nodetype ${new AST.NodeType(NT.CAT).toString()} but was ${new AST.NodeType(nodeCat.type).toString()}`);\r\n  }\r\n  if (startIndex !== undefined && (startIndex >= 0)) {\r\n    return sentence[startIndex].matchedString;\r\n  }\r\n  throw new Error(' no startindex' + JSON.stringify(nodeCat));\r\n};\r\n\r\nexport function getFactForNode(nodeFact: AST.ASTNode, sentence: IFErBase.ISentence) {\r\n  var factIndex = nodeFact.bearer.startOffset;\r\n  //console.log(JSON.stringify(sentence[factIndex], undefined, 2));\r\n  return sentence[factIndex].matchedString; //.category;\r\n};\r\n\r\nexport function makeMongoName(s: string): string {\r\n  return MongoMap.makeMongoNameLC(s);\r\n  //return s.replace(/[^a-zA-Z0-9]/g,'_');\r\n}\r\n\r\nfunction makeFilterObj(cat, filter) {\r\n  var filterObj = {};\r\n  filterObj[cat] = filter;\r\n  return filterObj;\r\n}\r\n\r\nexport function addFilterToMatch(res, cat, filter) {\r\n  if (res['$and']) {\r\n    res['$and'].push(makeFilterObj(cat, filter));\r\n    return res;\r\n  }\r\n  if (res[cat]) {\r\n    var filters = Object.keys(res).sort().map(key => makeFilterObj(key, res[key]));\r\n    filters.push(makeFilterObj(cat, filter));\r\n    return { $and: filters };\r\n  }\r\n  res[cat] = filter;\r\n  return res;\r\n};\r\n\r\nexport function addFilterExpr(res, expr : any ) {\r\n  if (res['$and']) {\r\n    res['$and'].push(expr);\r\n    return res;\r\n  }\r\n  res['$and'] = [ expr ];\r\n  return res;\r\n};\r\n\r\nexport function addObjectProp( src, key : string, value : any) : any\r\n{\r\n  src[key] = value;\r\n  return src;\r\n}\r\n\r\nexport function addSortExpression( res, expr : any)\r\n{\r\n  if (res['$sort']) {\r\n    _.merge( res['$sort'], expr );\r\n    return res;\r\n  }\r\n  res['$sort'] = expr;\r\n  return res;\r\n}\r\n\r\nexport function getNumberArg( node :AST.ASTNode , sentence: IFErBase.ISentence ) : number\r\n{\r\n  var startIndex = node && node.bearer && node.bearer.startOffset;\r\n  if (node.type !== NT.NUMBER) {\r\n    throw new Error(`Expected nodetype ${new AST.NodeType(NT.CAT).toString()} but was ${new AST.NodeType(node.type).toString()}`);\r\n  }\r\n  if (startIndex !== undefined && (startIndex >= 0)) {\r\n    //TODO treat one, two\r\n    return parseInt(sentence[startIndex].matchedString);\r\n  }\r\n  throw new Error(' no startindex' + JSON.stringify(node));\r\n};\r\n\r\n\r\nexport function isArray( mongoHandleRaw: IFModel.IModelHandleRaw,  domain : string, category : string )\r\n{\r\n  var cat = Model.getCategoryRec( mongoHandleRaw, domain, category );\r\n  return _.isArray( cat.type );\r\n}\r\n\r\n\r\n\r\nexport function amendCategoryList( extractSortResult: any[], catList : string[]) : string[] {\r\n  var res = [];\r\n  extractSortResult.forEach( a => {\r\n    var name = a.categoryName;\r\n    if( !catList.includes(name)) {\r\n      res.push(name);\r\n    }\r\n  });\r\n  res = res.concat(catList);\r\n  return res;\r\n}\r\n\r\nexport function makeMongoMatchFromAst(node: AST.ASTNode, sentence: IFErBase.ISentence, mongoMap: IFModel.CatMongoMap, domain: string, mongoHandleRaw : IFModel.IModelHandleRaw ) {\r\n  debug(AST.astToText(node));\r\n  //console.log(\"making mongo match \" + AST.astToText(node));\r\n  if (!node) {\r\n    return { $match: {} };\r\n  }\r\n  if (node.type !== NT.LIST) {\r\n    throw new Error('expected different nodetype ' + node.type);\r\n  }\r\n  var res = {};\r\n  node.children.forEach(n => {\r\n    var category = getCategoryForNodePair(n.children[0], n.children[1], sentence);\r\n    //console.log('here is the domain ' + mongodomain);\r\n    //console.log('here is the domain ' + Object.keys(theModel.mongoHandle.mongoMaps).join(\"\\n\"));\r\n\r\n    //console.log(JSON.stringify(theModel.mongoHandle.mongoMaps[mongodomain], undefined,2));\r\n    var mongocatfullpath = mongoMap[category].fullpath; // Model.getMongoosePath(theModel, category); //makeMongoName(cat);\r\n    debuglog(() => `here is the fullpath for ${category} is ${mongocatfullpath} `);\r\n    var fact = (n.children.length > 1) && getFactForNode(n.children[1], sentence);\r\n    if (n.type === NT.OPEqIn) {\r\n      res = addFilterToMatch(res, mongocatfullpath, fact);\r\n    } else if (n.type === NT.OPStartsWith) {\r\n      res = addFilterToMatch(res, mongocatfullpath, { $regex: new RegExp(`^${fact.toLowerCase()}`, \"i\") });\r\n    } else if (n.type === NT.OPEndsWith) {\r\n      debuglog(() => '!!!!adding regex with expression ' + fact.toLowerCase());\r\n      res = addFilterToMatch(res, mongocatfullpath, { $regex: new RegExp(`${fact.toLowerCase()}$`, \"i\") });\r\n    }/* else if (n.type === NT.OPMoreThan) {\r\n      var numberarg = getNumberArg(n.children[0], sentence);\r\n      debuglog(() => '!!!!adding more than ' + numberarg + ' for category ' + category );\r\n      //TODO //res = addFilterToMatch(res, mongocatfullpath, { 'count' ( mongocatfullpath ) gt numberarg , \"i\") });\r\n      var argpath = '$' + mongocatfullpath;\r\n      res = addFilterExpr( res,\r\n        { $expr: { $gt: [ { $switch: { branches: [ { case: { $isArray : argpath }, then: { $size: argpath } }], default : 1 }}\r\n                        , numberarg ]}} );\r\n\r\n//\r\n//        { $expr: { $gt: [ { $size: '$standort'},1 ]}} );\r\n//      ([ { $match : { $expr: { $gt: [ { $size: argpath }, numberarg ]}}}]);\r\n// two stage\r\n// use $addFields  with 3.4\r\n// try also $expr directly\r\n//       > db.demomdls.aggregate([ { $project : { standort_size : { $size: '$standort' }, standort:1, sender:1, uu : { $gt:[ { $size: '$standort' },3]} , abx : { $gt:[ \"$standort\", 1]}}}, { $match: { \"standort_size\": { $eq: { $size: '$standort'} }}}]);\r\n//      > db.demomdls.aggregate([ { $project : { standort_size : { $size: '$standort' }, standort:1, sender:1, uu : { $gt:[ { $size: '$standort' },3]} , abx : { $gt:[ \"$standort\", 1]}}}, { $match: { \"standort_size\": { $gt: 1 }}}]);\r\n//      { \"_id\" : ObjectId(\"5db88a185b66759cfc56bcd4\"), \"standort\" : [ \"Berlin\", \"München\", \"Frankfurt\", \"Hamburg\", \"Bremen\" ], \"sender\" : \"ARundfunkD\", \"standort_size\" : 5, \"uu\" : true, \"abx\" : true }\r\n\r\n\r\n    // exact match: db.demomdls.aggregate([ { $match: { standort : { $size : 3 }}},\r\n\r\n    }*/\r\n    else if (n.type === NT.OPLessThan || n.type === NT.OPMoreThan || n.type == NT.OPExactly) {\r\n      var numberarg = getNumberArg(n.children[0], sentence);\r\n      debuglog(() => '!!!!adding more than ' + numberarg + ' for category ' + category );\r\n      //TODO //res = addFilterToMatch(res, mongocatfullpath, { 'count' ( mongocatfullpath ) gt numberarg , \"i\") });\r\n      var argpath = '$' + mongocatfullpath;\r\n      var extract = [ { $switch: { branches: [ { case: { $isArray : argpath }, then: { $size: argpath } }], default : 1 }}\r\n      , numberarg ];\r\n      switch(n.type)\r\n      {\r\n        case NT.OPLessThan:     res = addFilterExpr( res,  { $expr: { $lt: extract } } ); break;\r\n        case NT.OPMoreThan:     res = addFilterExpr( res,  { $expr: { $gt: extract } } ); break;\r\n        case NT.OPExactly:      res = addFilterExpr( res,  { $expr: { $eq: extract } } ); break;\r\n      }\r\n    }\r\n    else if (n.type === NT.OPContains) {\r\n      res = addFilterToMatch(res, mongocatfullpath, { $regex: new RegExp(`${fact.toLowerCase()}`, \"i\") });\r\n    }\r\n    else if (n.type === NT.OPGT || n.type === NT.OPLT\r\n      || n.type == NT.OPEQ || n.type == NT.OPNE\r\n      || n.type == NT.OPGE || n.type == NT.OPLE )\r\n    {\r\n      var fact = getFactForNode(n.children[1], sentence);\r\n      var argpath = '$' + mongocatfullpath;\r\n      var extract2 = [ argpath, `${fact}` ];\r\n      // $switch: { branches: [ { case: { $isArray : argpath }, then: { $size: argpath } }], default : 1 }}\r\n\r\n      var opstr = '$lt';\r\n      switch(n.type)\r\n      {\r\n        case NT.OPLT:      opstr = '$lt'; break;\r\n        case NT.OPGT:      opstr = '$gt'; break;\r\n        case NT.OPEQ:      opstr = '$eq'; break;\r\n        case NT.OPNE:      opstr = '$ne'; break;\r\n        case NT.OPLE:      opstr = '$lte'; break;\r\n        case NT.OPGE:      opstr = '$gte'; break;\r\n      }\r\n\r\n      if (isArray(mongoHandleRaw, domain, category))\r\n      {\r\n        // db.demomdls.aggregate([ { $match: { standort : {  $elemMatch : { '$gte': 'M' }} }  }  ]);\r\n        var filterobj = makeFilterObj( mongocatfullpath, { $elemMatch : makeFilterObj( opstr, `${fact}` ) } );\r\n        res = addFilterExpr( res, filterobj );\r\n      }\r\n      else\r\n      {\r\n        var filterobj = makeFilterObj( mongocatfullpath, makeFilterObj( opstr, `${fact}` ));\r\n        res = addFilterExpr( res, filterobj );\r\n      }\r\n      //var numberarg = getNumberArg(n.children[0], sentence);\r\n    }\r\n    else if (n.type === NT.OPOrderBy || n.type === NT.OPOrderDescendingBy)\r\n    {\r\n      //var ascdesc = (n.type == NT.OPOrderDescendingBy) ? 1 : -1;\r\n      // res = addSortExpression(res, addObjectProp( {}, mongocatfullpath, ascdesc ) );\r\n    // TODO  this may be added in the wrong position\r\n    //  one also has to assure the data is not projected out before\r\n    //   throw new Error('Expected nodetype NT.OPEqIn but was ' + n.type);\r\n    // { $sort : { sender : -1 } }`\r\n    }\r\n    else if ( n.type === NT.OPNotExisting )\r\n    {\r\n       // { item : null }\r\n      var filterobj = makeFilterObj( mongocatfullpath, null );\r\n      res = addFilterExpr( res, filterobj );\r\n     //  throw new Error('Expected nodetype OPExisiting not supported here  NT.OPEqIn but was ' + n.type);\r\n    }\r\n    else if (n.type === NT.OPExisting )\r\n    {\r\n      var filterobj = makeFilterObj( mongocatfullpath, { '$exists' : true} );\r\n      res = addFilterExpr( res, filterobj );\r\n     //  throw new Error('Expected nodetype OPExisiting not supported here  NT.OPEqIn but was ' + n.type);\r\n    }\r\n    else {\r\n      throw new Error('Expected nodetype NT.OPEqIn but was ' + n.type);\r\n    }\r\n  });\r\n  return { $match: res };\r\n}\r\n\r\nexport function extractExplicitSortFromAst(node: AST.ASTNode, sentence: IFErBase.ISentence, mongoMap: IFModel.CatMongoMap, domain: string, mongoHandleRaw : IFModel.IModelHandleRaw ) : ExplicitSort[] {\r\n// return an array\r\n  debug(AST.astToText(node));\r\n  //console.log(\"making mongo match \" + AST.astToText(node));\r\n  if (!node) {\r\n    return [];\r\n  }\r\n  if (node.type !== NT.LIST) {\r\n    throw new Error('expected different nodetype ' + node.type);\r\n  }\r\n  var res = [] as ExplicitSort[];\r\n  node.children.forEach(n => {\r\n    var category = getCategoryForNodePair(n.children[0], n.children[1], sentence);\r\n    var mongocatfullpath = mongoMap[category].fullpath; // Model.getMongoosePath(theModel, category); //makeMongoName(cat);\r\n    var fact = (n.children.length > 1) && getFactForNode(n.children[1], sentence);\r\n    if (n.type === NT.OPOrderBy || n.type === NT.OPOrderDescendingBy)\r\n    {\r\n      var ascdesc = (n.type == NT.OPOrderDescendingBy) ? 1 : -1;\r\n      res.push( {\r\n        categoryName : category,\r\n        mongocatfullpath : mongocatfullpath,\r\n        ascDesc : ascdesc\r\n       } as ExplicitSort);\r\n    }\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function makeMongoGroupFromAst(categoryList : string[], mongoMap: IFModel.CatMongoMap) {\r\n  var res = {};\r\n  categoryList.forEach(category => {\r\n    var mongocatfullpath = MongoMap.getFirstSegment(mongoMap[category].paths); // Model.getMongoosePath(theModel, category); //makeMongoName(cat);\r\n    res[mongocatfullpath] = '$' + mongocatfullpath;\r\n  });\r\n  var r1 = { $group: Object.assign({ _id: Object.assign({}, res) }, {}) };\r\n  var firstX = {};\r\n  Object.keys(res).forEach(key => { firstX[key] = { $first: '$' + key } });\r\n  r1.$group = Object.assign(r1.$group, firstX);\r\n  return r1;\r\n}\r\n\r\nexport function makeMongoColumnsFromAst(categoryList : string[], mongoMap: IFModel.CatMongoMap)\r\n  : { columns: string[], reverseMap: { [key: string]: string } } {\r\n  var res = {\r\n    columns: [],\r\n    reverseMap: {}\r\n  };\r\n  categoryList.forEach(category => {\r\n    res.columns.push(category);\r\n    var catmongo = MongoMap.getShortProjectedName(mongoMap, category);\r\n    if (category !== catmongo) {\r\n      res.reverseMap[catmongo] = category;\r\n    }\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function getCategoryList(fixedCategories: string[], node: AST.ASTNode, sentence: IFErBase.ISentence): string[] {\r\n  var res = fixedCategories.slice();\r\n  while ( node.type !== NT.LIST )\r\n    node = node.children[0];\r\n  debug(AST.astToText(node));\r\n  if (node.type !== NT.LIST) {\r\n    throw new Error('expected different nodetype ' + node.type);\r\n  }\r\n  node.children.map(n => {\r\n    if (n.type === NT.CAT) {\r\n      var category = getCategoryForNode(n, sentence);\r\n      if (res.indexOf(category) < fixedCategories.length) {\r\n        res.push(category);\r\n      }\r\n    } else {\r\n      throw new Error(`Expected nodetype ${new AST.NodeType(NT.CAT).toString()} but was ${new AST.NodeType(n.type).toString()}`);\r\n    }\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function makeMongoProjectionFromAst(categoryList: string[], mongoMap: IFModel.CatMongoMap) {\r\n  var res = { _id: 0 };\r\n  categoryList.map(category => {\r\n    var mongocatfullpath = mongoMap[category].fullpath; //makeMongoName(cat);\r\n    var shortName = MongoMap.getShortProjectedName(mongoMap, category);\r\n    if (shortName === mongocatfullpath) {\r\n      res[mongocatfullpath] = 1;\r\n    } else {\r\n      res[shortName] = \"$\" + mongocatfullpath;\r\n    }\r\n  });\r\n  return { $project: res };\r\n}\r\n\r\n\r\n\r\nexport function makeMongoSortFromAst(categoryList: string[], mongoMap: IFModel.CatMongoMap) {\r\n  var res = {};\r\n  categoryList.forEach(category => {\r\n    var shortName = MongoMap.getShortProjectedName(mongoMap, category);\r\n    res[shortName] = 1;\r\n  });\r\n  return { $sort: res };\r\n}\r\n\r\nexport interface ExplicitSort {\r\n  categoryName : string,\r\n  ascDesc : number,\r\n  mongocatfullpath : string\r\n};\r\n\r\nexport function makeMongoExplicitSort(explicitSort : ExplicitSort[], categoryList: string[], mongoMap: IFModel.CatMongoMap) {\r\n  var res = {};\r\n  explicitSort.forEach( es => {\r\n    var mongoCatName = es.mongocatfullpath;\r\n    res[mongoCatName] = es.ascDesc;\r\n  });\r\n  categoryList.forEach(category => {\r\n    var shortName = MongoMap.getShortProjectedName(mongoMap, category);\r\n    if( res[shortName] == undefined) {\r\n      res[shortName] = 1;\r\n    }\r\n  });\r\n  return { $sort: res };\r\n}\r\n\r\n\r\n\r\nexport function makeMongoMatchF(filters: IFilter[]) {\r\n  var res = { $match: {} };\r\n  //console.log('is match \\n');\r\n  filters.forEach(filter => {\r\n    res.$match[filter.cat] = filter.value;\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function makeMongoProjection(cols: string[]): any {\r\n  var res = { $project: { _id: 0 } };\r\n  cols.forEach(col => {\r\n    res.$project[col] = 1;\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function makeMongoQuery(filters: IFilter[], resultcolumns: string[]): any {\r\n  var filter = makeMongoMatchF(filters);\r\n  var group = makeMongoDistinctGroup(resultcolumns);\r\n  var projection = makeMongoProjection(resultcolumns);\r\n  return [filter, group, projection];\r\n\r\n}\r\n\r\n\r\n"],"sourceRoot":"src"}