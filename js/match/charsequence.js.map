{"version":3,"sources":["/projects/nodejs/botbuilder/mgnlq_parser1/src//projects/nodejs/botbuilder/mgnlq_parser1/src/../src/match/charsequence.ts"],"names":[],"mappings":";AAAA;;;;;;;;;GASG;;AAEH,6CAA6C;AAE7C,kCAAkC;AAElC,2CAA2C;AAE3C,iCAAiC;AACjC,uCAAuC;AACvC,6CAA6C;AAC7C,4CAA4C;AAE/B,QAAA,YAAY,GAAG;IAC1B,cAAc,EAAG,UAAU,CAAU,EAAE,CAAU;QAC/C,IAAK,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAE,GAAI,CAAC;YACtC,OAAO,KAAK,CAAC;QACf,IAAK,CAAC,IAAI,CAAC;YACT,OAAO,IAAI,CAAC;QACd,IAAK,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM;YACtB,OAAO,oBAAY,CAAC,cAAc,CAAE,CAAC,EAAE,CAAC,CAAE,CAAC;QAC7C,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAE,IAAI,CAAC,EACnD;YACE,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,WAAW,EAAG,UAAS,CAAS,EAAE,CAAS;QACzC,OAAO,QAAQ,CAAC,YAAY,CAAE,CAAC,EAAE,CAAC,CAAE,GAAG,KAAK,CAAC,sBAAsB,CAAE;IACvE,CAAC;IACD,yBAAyB,EAAG,UAAS,CAAU,EAAE,CAAU;QACzD,IAAI,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QACzB,IAAI,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QACzB,OAAQ,oBAAY,CAAC,cAAc,CAAC,EAAE,EAAE,EAAE,CAAC;eAClC,oBAAY,CAAC,WAAW,CAAC,EAAE,EAAC,EAAE,CAAC,CAAC;IAC3C,CAAC;CACF,CAAC","file":"charsequence.js","sourcesContent":["/**\n * @file charsequence\n * @module jfseb.mnglq_er.charsequence\n * @copyright (c) Gerd Forstmann\n *\n * Char sequence specific comparisons\n *\n * Very simple comparisons based on plain strings\n *\n */\n\n// <reference path=\"../../lib/node-4.d.ts\" />\n\n// import * as debug from 'debug';\n\n// import * as utils from '../utils/utils';\n\nimport * as Algol from './algol';\n//import * as IMatch from './iferbase';\n// <reference path=\"../../lib/node-4.d.ts\" />\nimport * as distance from 'abot_stringdist';\n\nexport const CharSequence = {\n  isSameOrPlural : function( a : string, b : string ) : boolean {\n    if ( Math.abs(a.length - b.length ) >  1)\n      return false;\n    if ( a == b )\n      return true;\n    if ( a.length > b.length )\n      return CharSequence.isSameOrPlural( b, a );\n    if (b.length > 3 && b.substr(0, b.length - 1 ) == a)\n    {\n      return true;\n    }\n    return false;\n  },\n  isVeryClose : function(a: string, b: string) : boolean {\n    return distance.calcDistance( a, b ) > Algol.Cutoff_rangeCloseMatch ;\n  },\n  isSameOrPluralOrVeryClose : function(a : string, b : string) : boolean {\n    var al = a.toLowerCase();\n    var bl = b.toLowerCase();\n    return  CharSequence.isSameOrPlural(al, bl)\n          || CharSequence.isVeryClose(al,bl);\n  }\n};\n"],"sourceRoot":"ABC"}