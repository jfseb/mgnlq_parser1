{"version":3,"sources":["../src/tokens.ts"],"names":[],"mappings":"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","file":"tokens.js","sourcesContent":["\n\n  'use strict'\n  import * as chevrotain from 'chevrotain';\n    var createToken = chevrotain.createToken;\n\n    var Tall = createToken({name: \"all\", pattern: /all/i });\nvar Tand = createToken({name: \"and\", pattern: /and/i });\nvar Ta = createToken({name: \"a\", pattern: /a/i });\nvar TAnANY = createToken({name: \"AnANY\", pattern: /AnANY/ });\nvar Tany = createToken({name: \"any\", pattern: /any/i });\nvar Tat = createToken({name: \"at\", pattern: /at/i });\nvar TCAT = createToken({name: \"CAT\", pattern: /CAT/ });\nvar TComma = createToken({name: \"Comma\", pattern: /,/i });\nvar Tcontaining = createToken({name: \"containing\", pattern: /containing/i });\nvar Tcontains = createToken({name: \"contains\", pattern: /contains/i });\nvar TDOM = createToken({name: \"DOM\", pattern: /DOM/ });\nvar Tdomain = createToken({name: \"domain\", pattern: /domain/i });\nvar Tending_with = createToken({name: \"ending_with\", pattern: /ending_with/i });\nvar Tending = createToken({name: \"ending\", pattern: /ending/i });\nvar Tends_with = createToken({name: \"ends_with\", pattern: /ends_with/i });\nvar Tends = createToken({name: \"ends\", pattern: /ends/i });\nvar TEQ = createToken({name: \"EQ\", pattern: /=/i });\nvar Tequals = createToken({name: \"equals\", pattern: /equals/i });\nvar Tevery = createToken({name: \"every\", pattern: /every/i });\nvar Texactly = createToken({name: \"exactly\", pattern: /exactly/i });\nvar Texisting = createToken({name: \"existing\", pattern: /existing/i });\nvar Te = createToken({name: \"e\", pattern: /e/i });\nvar TFACT = createToken({name: \"FACT\", pattern: /FACT/ });\nvar Tfirst = createToken({name: \"first\", pattern: /first/i });\nvar Tfor = createToken({name: \"for\", pattern: /for/i });\nvar Tfrom = createToken({name: \"from\", pattern: /from/i });\nvar TGE = createToken({name: \"GE\", pattern: />=/i });\nvar Tgreater = createToken({name: \"greater\", pattern: /greater/i });\nvar TGT = createToken({name: \"GT\", pattern: />/i });\nvar Tin = createToken({name: \"in\", pattern: /in/i });\nvar Tis = createToken({name: \"is\", pattern: /is/i });\nvar Tlast = createToken({name: \"last\", pattern: /last/i });\nvar Tlatest = createToken({name: \"latest\", pattern: /latest/i });\nvar TLE = createToken({name: \"LE\", pattern: /<=/i });\nvar Tleast = createToken({name: \"least\", pattern: /least/i });\nvar Tleat = createToken({name: \"leat\", pattern: /leat/i });\nvar Tleft_paren = createToken({name: \"left_paren\", pattern: /left_paren/i });\nvar Tless_than = createToken({name: \"less_than\", pattern: /less_than/i });\nvar Tless = createToken({name: \"less\", pattern: /less/i });\nvar Tlife = createToken({name: \"life\", pattern: /life/i });\nvar Tlist = createToken({name: \"list\", pattern: /list/i });\nvar Tlogical_and = createToken({name: \"logical_and\", pattern: /logical_and/i });\nvar Tlogical_or = createToken({name: \"logical_or\", pattern: /logical_or/i });\nvar TLParen = createToken({name: \"LParen\", pattern: /\\(/i });\nvar TLT = createToken({name: \"LT\", pattern: /</i });\nvar Tmore_than = createToken({name: \"more_than\", pattern: /more_than/i });\nvar TNE = createToken({name: \"NE\", pattern: /!=/i });\nvar Tnewest = createToken({name: \"newest\", pattern: /newest/i });\nvar Tnot_existing = createToken({name: \"not_existing\", pattern: /not_existing/i });\nvar Tof = createToken({name: \"of\", pattern: /of/i });\nvar Toldest = createToken({name: \"oldest\", pattern: /oldest/i });\nvar Tone = createToken({name: \"one\", pattern: /one/i });\nvar Torder_by = createToken({name: \"order_by\", pattern: /order_by/i });\nvar Torder_descending_by = createToken({name: \"order_descending_by\", pattern: /order_descending_by/i });\nvar Tor = createToken({name: \"or\", pattern: /or/i });\nvar Trelating = createToken({name: \"relating\", pattern: /relating/i });\nvar Tright_paren = createToken({name: \"right_paren\", pattern: /right_paren/i });\nvar TRParen = createToken({name: \"RParen\", pattern: /\\)/i });\nvar Tselect = createToken({name: \"select\", pattern: /select/i });\nvar Tshort = createToken({name: \"short\", pattern: /short/i });\nvar Tstarting_with = createToken({name: \"starting_with\", pattern: /starting_with/i });\nvar Tstarting = createToken({name: \"starting\", pattern: /starting/i });\nvar Tstarts_with = createToken({name: \"starts_with\", pattern: /starts_with/i });\nvar Tstarts = createToken({name: \"starts\", pattern: /starts/i });\nvar Tthan = createToken({name: \"than\", pattern: /than/i });\nvar Tthe = createToken({name: \"the\", pattern: /the/i });\nvar Twhere = createToken({name: \"where\", pattern: /where/i });\nvar Twith = createToken({name: \"with\", pattern: /with/i });\nvar TInteger = createToken({name: \"Integer\", pattern: /0[1-9]\\d+/i });\nvar TIdentifier = createToken({name: \"Identifier\", pattern: /\\w+/i });\n\n    \n    export const Tokens = {\n   all : Tall ,\n and : Tand ,\n a : Ta ,\n AnANY : TAnANY ,\n any : Tany ,\n at : Tat ,\n CAT : TCAT ,\n Comma : TComma ,\n containing : Tcontaining ,\n contains : Tcontains ,\n DOM : TDOM ,\n domain : Tdomain ,\n ending_with : Tending_with ,\n ending : Tending ,\n ends_with : Tends_with ,\n ends : Tends ,\n EQ : TEQ ,\n equals : Tequals ,\n every : Tevery ,\n exactly : Texactly ,\n existing : Texisting ,\n e : Te ,\n FACT : TFACT ,\n first : Tfirst ,\n for : Tfor ,\n from : Tfrom ,\n GE : TGE ,\n greater : Tgreater ,\n GT : TGT ,\n in : Tin ,\n is : Tis ,\n last : Tlast ,\n latest : Tlatest ,\n LE : TLE ,\n least : Tleast ,\n leat : Tleat ,\n left_paren : Tleft_paren ,\n less_than : Tless_than ,\n less : Tless ,\n life : Tlife ,\n list : Tlist ,\n logical_and : Tlogical_and ,\n logical_or : Tlogical_or ,\n LParen : TLParen ,\n LT : TLT ,\n more_than : Tmore_than ,\n NE : TNE ,\n newest : Tnewest ,\n not_existing : Tnot_existing ,\n of : Tof ,\n oldest : Toldest ,\n one : Tone ,\n order_by : Torder_by ,\n order_descending_by : Torder_descending_by ,\n or : Tor ,\n relating : Trelating ,\n right_paren : Tright_paren ,\n RParen : TRParen ,\n select : Tselect ,\n short : Tshort ,\n starting_with : Tstarting_with ,\n starting : Tstarting ,\n starts_with : Tstarts_with ,\n starts : Tstarts ,\n than : Tthan ,\n the : Tthe ,\n where : Twhere ,\n with : Twith ,\n Integer : TInteger ,\n Identifier : TIdentifier \n    };\n    export const OperatorLookup = {\n       \"all\" : Tall ,\n \"and\" : Tand ,\n \"a\" : Ta ,\n \"AnANY\" : TAnANY ,\n \"any\" : Tany ,\n \"at\" : Tat ,\n \"CAT\" : TCAT ,\n \",\" : TComma ,\n \"containing\" : Tcontaining ,\n \"contains\" : Tcontains ,\n \"DOM\" : TDOM ,\n \"domain\" : Tdomain ,\n \"ending with\" : Tending_with ,\n \"ending\" : Tending ,\n \"ends with\" : Tends_with ,\n \"ends\" : Tends ,\n \"=\" : TEQ ,\n \"equals\" : Tequals ,\n \"every\" : Tevery ,\n \"exactly\" : Texactly ,\n \"existing\" : Texisting ,\n \"e\" : Te ,\n \"FACT\" : TFACT ,\n \"first\" : Tfirst ,\n \"for\" : Tfor ,\n \"from\" : Tfrom ,\n \">=\" : TGE ,\n \"greater\" : Tgreater ,\n \">\" : TGT ,\n \"in\" : Tin ,\n \"is\" : Tis ,\n \"last\" : Tlast ,\n \"latest\" : Tlatest ,\n \"<=\" : TLE ,\n \"least\" : Tleast ,\n \"leat\" : Tleat ,\n \"left_paren\" : Tleft_paren ,\n \"less than\" : Tless_than ,\n \"less\" : Tless ,\n \"life\" : Tlife ,\n \"list\" : Tlist ,\n \"logical_and\" : Tlogical_and ,\n \"logical_or\" : Tlogical_or ,\n \"(\" : TLParen ,\n \"<\" : TLT ,\n \"more than\" : Tmore_than ,\n \"!=\" : TNE ,\n \"newest\" : Tnewest ,\n \"not existing\" : Tnot_existing ,\n \"of\" : Tof ,\n \"oldest\" : Toldest ,\n \"one\" : Tone ,\n \"order by\" : Torder_by ,\n \"order descending by\" : Torder_descending_by ,\n \"or\" : Tor ,\n \"relating\" : Trelating ,\n \"right_paren\" : Tright_paren ,\n \")\" : TRParen ,\n \"select\" : Tselect ,\n \"short\" : Tshort ,\n \"starting with\" : Tstarting_with ,\n \"starting\" : Tstarting ,\n \"starts with\" : Tstarts_with ,\n \"starts\" : Tstarts ,\n \"than\" : Tthan ,\n \"the\" : Tthe ,\n \"where\" : Twhere ,\n \"with\" : Twith ,\n \"123\" : TInteger ,\n \"identifier\" : TIdentifier \n        };\n  \n  "],"sourceRoot":"src"}